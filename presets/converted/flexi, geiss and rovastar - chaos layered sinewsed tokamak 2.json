{"baseVals":{"rating":0,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_orient":2,"wave_mode":1,"wave_thick":1,"wave_brighten":0,"wrap":0,"wave_a":0.004,"wave_scale":0.01,"wave_smoothing":0,"wave_mystery":-0.44,"modwavealphastart":1,"modwavealphaend":1,"warpscale":1.331,"zoom":1.004,"warp":0.19788,"sx":0.99967,"sy":0.9999,"wave_y":0.04,"ob_size":0,"ob_r":1,"ob_a":0.7,"ib_size":0,"ib_r":0,"ib_g":0,"ib_b":0,"ib_a":1,"mv_x":0,"mv_y":0,"mv_l":1,"mv_g":0.91,"mv_b":0.71,"mv_a":0,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":100,"additive":1,"thickoutline":1,"rad":0.04466,"tex_zoom":0.73458,"g":1,"b":1,"g2":0,"border_a":0},"init_eqs_str":"m.vx=0;\n\t\t\tm.rkeys = [];","frame_eqs_str":""},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.du = 0;\nm.q1 = 0;\nm.mult = 0;\nm.ang2 = 0;\nm.dv = 0;\nm.q2 = 0;\nm.dist = 0;","frame_eqs_str":"m.mv_g=(m.mv_g+(0.2*((0.60*Math.sin((0.835*m.time)))+(0.40*Math.sin((1.081*m.time)))))); m.mv_b=(m.mv_b+(0.2*((0.60*Math.sin((0.814*m.time)))+(0.40*Math.sin((1.011*m.time)))))); m.q1=(((m.cx*2)-1)+(0.6*((0.60*Math.sin((0.374*m.time)))+(0.40*Math.sin((0.294*m.time)))))); m.q2=(((m.cy*2)-1)+(0.6*((0.60*Math.sin((0.393*m.time)))+(0.40*Math.sin((0.223*m.time)))))); m.ob_r=(1-(0.4*Math.abs(m.q1))); m.ob_g=(0.3*Math.abs(m.q2)); m.ob_b=(0.4*Math.abs(m.q1)); m.wave_x=((1-Math.abs(m.q2))-0.05); m.wave_y=((1-Math.abs(m.q1))-0.06); m.wave_r=(m.wave_r+(0.4*((0.60*Math.sin((0.514*m.time)))+(0.40*Math.sin((1.211*m.time)))))); m.wave_b=(m.wave_b+(0.4*((0.60*Math.sin((0.714*m.time)))+(0.40*Math.sin(m.q2))))); m.wave_g=(m.wave_g+(0.4*((0.60*Math.sin((10*m.q1)))+(0.40*Math.sin((10*m.q2))))));\n\t\tm.rkeys = [];","pixel_eqs_str":"m.du=(((m.x*2)-1)-m.q1); m.dv=(((m.y*2)-1)-m.q2); m.dist=sqrt(((m.du*m.du)+(m.dv*m.dv))); m.ang2=(Math.atan2(m.du, m.dv)+(m.time*0.15)); m.mult=(0.6*Math.sin((m.dist*0.05)));","warp":"shader_body\n{\n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2.x = (((texture (sampler_blur2, \n    (uv + vec2(0.0009, 0.0))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.0009, 0.0))\n  ).xyz * scale2) + bias2)).y;\n  tmpvar_2.y = (((texture (sampler_blur2, \n    (uv + vec2(0.0, 0.0009))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.0, 0.0009))\n  ).xyz * scale2) + bias2)).y;\n  vec2 tmpvar_3;\n  tmpvar_3 = (uv - (tmpvar_2 * 0.01));\n  ret_1.y = texture (sampler_fc_main, (tmpvar_3 - floor(tmpvar_3))).y;\n  ret_1.y = (ret_1.y + ((ret_1.y - \n    ((texture (sampler_blur3, (tmpvar_3 - floor(tmpvar_3))).xyz * scale3) + bias3)\n  .y) * 0.1));\n  ret_1.y = (ret_1.y + (0.006 - (\n    ((texture (sampler_blur3, (uv - floor(uv))).xyz * scale3) + bias3)\n  .x * 5.0)));\n  ret_1.y = ret_1.y;\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n}\n\n","comp":"shader_body\n{\n  vec2 uv_1;\n  vec3 ret_2;\n  vec2 tmpvar_3;\n  tmpvar_3.x = cos((uv.y * 270.0));\n  tmpvar_3.y = sin((uv.x * 390.0));\n  uv_1 = (uv + (0.01 * tmpvar_3));\n  ret_2 = (1.4 * pow ((\n    clamp (((texture (sampler_blur1, uv_1).xyz * scale1) + bias1), 0.0, 1.0)\n   * \n    (texture (sampler_pc_main, uv_1).xyz - ((texture (sampler_blur3, uv_1).xyz * scale3) + bias3))\n  ), vec3(0.5, 0.5, 0.5)));\n  ret_2 = ((vec3(0.9, 0.2, 0.4) * ret_2.z) + (vec3(0.2, 0.4, 0.8) * ret_2.y));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_2;\n  ret = tmpvar_4.xyz;\n}\n\n"}