{"baseVals":{"rating":0,"decay":0.987,"echo_zoom":1.006435,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"additivewave":1,"wave_brighten":0,"wrap":0,"darken":1,"wave_a":1.0284,"wave_scale":0.591188,"wave_smoothing":0.18,"wave_mystery":0.24,"modwavealphastart":0.95,"modwavealphaend":0.75,"zoomexp":1.0017,"fshader":0.1,"zoom":0.970297,"cx":0.4399,"warp":0.01,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"ob_size":0,"ib_size":0,"ib_r":0.5,"ib_g":0.5,"ib_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.bass_residual = 0;\nm.old_treb_flop = 0;\nm.bass_flop = 0;\nm.q1 = 0;\nm.q5 = 0;\nm.treb_flop = 0;\nm.bass_thresh = 0;\nm.old_bass_flop = 0;\nm.treb_thresh = 0;\nm.pulse = 0;\nm.bass_changed = 0;\nm.mid_thresh = 0;\nm.q4 = 0;\nm.mid_changed = 0;\nm.entropy = 0;\nm.old_mid_flop = 0;\nm.mid_residual = 0;\nm.treb_residual = 0;\nm.chaos = 0;\nm.mid_flop = 0;\nm.q2 = 0;\nm.treb_changed = 0;\nm.q3 = 0;","frame_eqs_str":"m.warp=0; m.old_bass_flop=m.bass_flop; m.old_treb_flop=m.treb_flop; m.old_mid_flop=m.mid_flop; m.chaos=(0.9+(0.1*Math.sin(m.pulse))); m.entropy=((bnot(m.entropy)!=0)?(2):(((equal(m.pulse, -20)!=0)?((1+rand(3))):(m.entropy)))); m.bass_thresh=((above(m.bass_att, m.bass_thresh)*2)+((1-above(m.bass_att, m.bass_thresh))*(((m.bass_thresh-1.3)*m.chaos)+1.3))); m.bass_flop=Math.abs((m.bass_flop-equal(m.bass_thresh, 2))); m.treb_thresh=((above(m.treb_att, m.treb_thresh)*2)+((1-above(m.treb_att, m.treb_thresh))*(((m.treb_thresh-1.3)*m.chaos)+1.3))); m.treb_flop=Math.abs((m.treb_flop-equal(m.treb_thresh, 2))); m.mid_thresh=((above(m.mid_att, m.mid_thresh)*2)+((1-above(m.mid_att, m.mid_thresh))*(((m.mid_thresh-1.3)*m.chaos)+1.3))); m.mid_flop=Math.abs((m.mid_flop-equal(m.mid_thresh, 2))); m.bass_changed=bnot(equal(m.old_bass_flop, m.bass_flop)); m.mid_changed=bnot(equal(m.old_mid_flop, m.mid_flop)); m.treb_changed=bnot(equal(m.old_treb_flop, m.treb_flop)); m.bass_residual=((m.bass_changed*Math.sin((m.time*(3-m.bass_thresh))))+(bnot(m.bass_changed)*m.bass_residual)); m.treb_residual=((m.treb_changed*Math.sin((m.time*(3-m.treb_thresh))))+(bnot(m.treb_changed)*m.treb_residual)); m.mid_residual=((m.mid_changed*Math.sin((m.time*(3-m.mid_thresh))))+(bnot(m.mid_changed)*m.mid_residual)); m.pulse=((above(Math.abs(m.pulse), 20)!=0)?(-20):(((m.pulse+((0.04*m.entropy)*bor((bor((m.bass_changed*bnot(m.treb_changed)), (m.treb_changed*bnot(m.bass_changed)))*bnot(m.mid_changed)), m.mid_changed)))+(((m.mid+m.bass)+m.treb)*0.025)))); m.q1=m.mid_residual; m.q2=m.bass_residual; m.q3=m.treb_residual; m.q4=Math.sin(m.pulse); m.q5=Math.cos(m.pulse); m.wave_r=(m.wave_r+(0.5*m.bass_residual)); m.wave_r=(m.wave_g+(0.5*m.mid_residual)); m.wave_r=(m.wave_b+(0.5*m.treb_residual)); m.wave_mystery=(m.wave_mystery+(0.23*m.mid_residual)); m.ob_r=((m.bass_flop!=0)?(m.treb_flop):(m.wave_r)); m.ob_b=((m.treb_flop!=0)?(m.mid_flop):(m.wave_b)); m.ob_g=((m.mid_flop!=0)?(m.bass_flop):(m.wave_g)); m.ob_a=(0.03+(0.02*m.wave_r)); m.ob_size=(0.05+(0.04*m.wave_b)); m.ib_r=((m.bass_flop!=0)?(m.ob_b):(m.ob_g)); m.ib_b=((m.treb_flop!=0)?(m.ob_g):(m.ob_r)); m.ib_g=((m.mid_flop!=0)?(m.ob_r):(m.ob_b)); m.ib_a=(0.03+(0.02*m.wave_g)); m.ib_size=(0.05+(0.04*m.ob_g)); m.zoom=(m.zoom+(0.08*m.mid_residual));\n\t\tm.rkeys = ['zoom','cx','cy'];","pixel_eqs_str":"m.rot=((above(m.q1, 0)!=0)?((0.4*Math.sin(((m.rad+m.q3)+m.q4)))):((0.4*Math.sin(((m.rad+m.q2)+m.q5))))); m.zoom=(m.zoom-div(m.rot,10)); m.cx=(m.cx+(0.3*Math.sin(((m.x*7)*m.q4)))); m.cy=(m.cy+(0.3*Math.cos(((m.y*5)*m.q5))));","warp":"shader_body\n{\n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (texture (sampler_main, uv).xyz * 0.99);\n  ret = tmpvar_1.xyz;\n}\n\n","comp":"shader_body\n{\n  vec3 ret_1;\n  ret_1 = texture (sampler_main, uv).xyz;\n  vec4 tmpvar_2;\n  tmpvar_2.w = 0.0;\n  tmpvar_2.xyz = ret_1;\n  vec2 tmpvar_3;\n  tmpvar_3.x = (1.0 - uv.x);\n  tmpvar_3.y = uv.y;\n  ret_1 = (max (tmpvar_2, texture (sampler_main, tmpvar_3)).xyz * 1.5);\n  ret_1 = (ret_1 * (0.9 + (0.1 * hue_shader)));\n  ret_1 = (ret_1 * ret_1);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n}\n\n"}