{"baseVals":{"rating":5,"gammaadj":1,"wave_mode":1,"wave_thick":1,"wave_brighten":0,"wave_a":0.004,"wave_scale":0.762,"wave_smoothing":0.9,"wave_mystery":-0.44,"modwavealphastart":1,"modwavealphaend":1,"warpanimspeed":0.408,"warpscale":0.905,"zoom":1.025,"warp":0.63735,"wave_y":0.04,"ob_size":0,"ob_r":1,"ob_g":1,"ob_b":1,"ob_a":1,"ib_r":1,"ib_g":1,"ib_b":1,"mv_x":64,"mv_y":48,"mv_l":5,"mv_g":0.91,"mv_b":0.71,"mv_a":0,"b1n":0.27,"b2n":0.78,"b3n":0.49,"b1x":0.84,"b2x":0.91,"b3x":0.52,"b1ed":0.9},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.scale = 0;\nm.q6 = 0;\nm.q1 = 0;\nm.q5 = 0;\nm.angle = 0;\nm.q4 = 0;\nm.q2 = 0;\nm.q3 = 0;\nm.q7 = 0;\nm.q8 = 0;","frame_eqs_str":"m.zoom=1; m.warp=0; m.scale=6; m.angle=(-m.time*0.2); m.q1=(m.scale*Math.cos(m.angle)); m.q2=(m.scale*Math.sin(m.angle)); m.q3=0; m.q4=0.3; m.scale=1.4; m.angle=(m.time*0.2); m.q5=(m.scale*Math.cos(m.angle)); m.q6=(m.scale*Math.sin(m.angle)); m.q7=-0.25; m.q8=0.2;\n\t\tm.rkeys = [];","pixel_eqs_str":"","pixel_eqs":"","warp":"vec2 xlat_mutabledenominator;\nvec2 xlat_mutablenumerator;\nshader_body\n{\n  vec2 uv_1;\n  float fnord_2;\n  uv_1 = ((uv_orig - 0.5) * aspect.xy);\n  vec2 tmpvar_3;\n  tmpvar_3.x = ((uv_1.x * q1) - (uv_1.y * q2));\n  tmpvar_3.y = ((uv_1.x * q2) + (uv_1.y * q1));\n  vec2 tmpvar_4;\n  tmpvar_4.x = q3;\n  tmpvar_4.y = q4;\n  xlat_mutablenumerator = (tmpvar_3 + tmpvar_4);\n  vec2 tmpvar_5;\n  tmpvar_5.x = ((uv_1.x * q5) - (uv_1.y * q6));\n  tmpvar_5.y = ((uv_1.x * q6) + (uv_1.y * q5));\n  vec2 tmpvar_6;\n  tmpvar_6.x = q7;\n  tmpvar_6.y = q8;\n  xlat_mutabledenominator = (tmpvar_5 + tmpvar_6);\n  vec2 tmpvar_7;\n  tmpvar_7.x = ((xlat_mutablenumerator.x * xlat_mutabledenominator.x) + (xlat_mutablenumerator.y * xlat_mutabledenominator.y));\n  tmpvar_7.y = ((xlat_mutablenumerator.y * xlat_mutabledenominator.x) - (xlat_mutablenumerator.x * xlat_mutabledenominator.y));\n  uv_1 = ((tmpvar_7 / (\n    (xlat_mutabledenominator.x * xlat_mutabledenominator.x)\n   + \n    (xlat_mutabledenominator.y * xlat_mutabledenominator.y)\n  )) * 0.2);\n  vec2 tmpvar_8;\n  tmpvar_8 = fract(uv_1);\n  uv_1 = tmpvar_8;\n  vec2 tmpvar_9;\n  tmpvar_9 = ((tmpvar_8 - 0.5) * texsize.xy);\n  float tmpvar_10;\n  float tmpvar_11;\n  tmpvar_11 = (time * 200.0);\n  tmpvar_10 = clamp (((float(mod (\n    ((abs(tmpvar_9.x) + abs(tmpvar_9.y)) + tmpvar_11)\n  , 128.0))) - 64.0), 0.0, 1.0);\n  float tmpvar_12;\n  tmpvar_12 = clamp (((float(mod (\n    ((-(abs(tmpvar_9.x)) - abs(tmpvar_9.y)) + tmpvar_11)\n  , 128.0))) - 64.0), 0.0, 1.0);\n  float tmpvar_13;\n  tmpvar_13 = sqrt(dot (tmpvar_9, tmpvar_9));\n  if ((tmpvar_13 > (0.25 * texsize.y))) {\n    fnord_2 = tmpvar_12;\n  } else {\n    fnord_2 = tmpvar_10;\n  };\n  vec4 tmpvar_14;\n  tmpvar_14.w = 1.0;\n  tmpvar_14.xyz = vec3(fnord_2);\n  ret = tmpvar_14.xyz;\n}\n\n","comp":"shader_body\n{\n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n}\n\n"}