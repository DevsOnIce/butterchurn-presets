{"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":5,"modwavealphabyvolume":1,"wave_a":2.929,"wave_scale":1.108,"wave_smoothing":0.9,"wave_mystery":0.4,"modwavealphastart":1.27,"modwavealphaend":1.43,"warpscale":3.138,"zoom":1.023,"warp":0.12262,"wave_r":0.5,"wave_g":0.5,"wave_b":0.5,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.bass_thresh = 0;\nm.dx_residual = 0;\nm.dy_residual = 0;","frame_eqs_str":"m.wave_r=((0.85+(0.35*Math.sin(((0.437*m.time)+1))))+(0.55*Math.sin(((0.197*m.time)+4)))); m.wave_g=((0.85+(0.35*Math.sin(((0.544*m.time)+2))))+(0.55*Math.sin(((0.143*m.time)+5)))); m.wave_b=((0.85+(0.35*Math.sin(((0.751*m.time)+3))))+(0.55*Math.sin(((0.117*m.time)+6)))); m.wave_r=sqrt(m.wave_r); m.wave_g=sqrt(m.wave_g); m.wave_b=sqrt(m.wave_b); m.wave_x=(rand(100)*0.01); m.wave_y=(0.25+((0.5*rand(100))*0.01)); m.rot=(m.rot+(0.010*((0.60*Math.sin((0.381*m.time)))+(0.40*Math.sin((0.579*m.time)))))); m.cx=(m.cx+(0.210*((0.60*Math.sin((0.374*m.time)))+(0.40*Math.sin((0.294*m.time)))))); m.cy=(m.cy+(0.210*((0.60*Math.sin((0.393*m.time)))+(0.40*Math.sin((0.223*m.time)))))); m.dx=(m.dx+(0.003*((0.60*Math.sin((0.234*m.time)))+(0.40*Math.sin((0.277*m.time)))))); m.dy=(m.dy+(0.003*((0.60*Math.sin((0.284*m.time)))+(0.40*Math.sin((0.247*m.time)))))); m.decay=(m.decay-(0.01*equal(mod(m.frame,6), 0))); m.dx=(m.dx+m.dx_residual); m.dy=(m.dy+m.dy_residual); m.bass_thresh=((above(m.bass_att, m.bass_thresh)*2)+((1-above(m.bass_att, m.bass_thresh))*(((m.bass_thresh-1.3)*0.96)+1.3))); m.dx_residual=(((equal(m.bass_thresh, 2.13)*0.016)*Math.sin((m.time*7)))+((1-equal(m.bass_thresh, 2.13))*m.dx_residual)); m.dy_residual=(((equal(m.bass_thresh, 2.13)*0.012)*Math.sin((m.time*9)))+((1-equal(m.bass_thresh, 2.13))*m.dy_residual)); m.wave_x=(m.wave_x-(m.dx_residual*7)); m.wave_y=(m.wave_y-(m.dy_residual*7)); m.wave_mystery=(m.time*0.03);\n\t\tm.rkeys = [];","pixel_eqs_str":"","pixel_eqs":"","warp":"shader_body\n{\n  vec3 ret_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv - 0.5);\n  ret_1.x = texture (sampler_main, (tmpvar_2 + 0.5)).x;\n  ret_1.y = texture (sampler_main, ((tmpvar_2 * 0.98) + 0.5)).y;\n  ret_1.z = texture (sampler_main, ((tmpvar_2 * 0.95) + 0.5)).z;\n  vec3 tmpvar_3;\n  tmpvar_3.x = -(ret_1.x);\n  tmpvar_3.y = (ret_1.x - ret_1.y);\n  tmpvar_3.z = (ret_1.y - ret_1.z);\n  ret_1 = (ret_1 + (tmpvar_3 * 0.03));\n  ret_1 = (ret_1 + ((\n    (texture (sampler_noise_lq, (((uv_orig * texsize.xy) * texsize_noise_lq.zw) + rand_frame.xy)).xyz - 0.5)\n   / 256.0) * 3.0));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n}\n\n","comp":"shader_body\n{\n  vec3 ret_1;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  float tmpvar_3;\n  tmpvar_3 = dot (tmpvar_2.xyz, vec3(0.32, 0.49, 0.29));\n  ret_1 = (((vec3(1.1, 0.8, 0.7) * tmpvar_2.x) + (vec3(0.4, 0.6, 0.55) * tmpvar_2.y)) + (vec3(0.7, 0.6, 0.9) * tmpvar_2.z));\n  ret_1 = ((ret_1 * ret_1) * (1.3 + (\n    (clamp (((\n      cos(((tmpvar_3 * 27.0) + 3.0))\n     * 30.0) - 26.0), 0.0, 1.0) * clamp (((\n      cos(((tmpvar_3 * 27.0) + 3.0))\n     * 30.0) - 26.0), 0.0, 1.0))\n   * 5.0)));\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ret_1;\n  ret = tmpvar_4.xyz;\n}\n\n"}