{"baseVals":{"rating":0,"gammaadj":1.980001,"decay":0.5,"echo_zoom":0.999998,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"additivewave":1,"wave_dots":0,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":1,"darken_center":0,"red_blue":0,"brighten":0,"darken":1,"solarize":0,"invert":0,"wave_a":0.001,"wave_scale":0.167975,"wave_smoothing":0,"wave_mystery":-0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.4595,"warpscale":2.0067,"zoomexp":1,"fshader":0,"zoom":0.9999,"rot":0,"cx":0.5,"cy":0.5,"dx":0,"dy":0,"warp":0.01,"sx":0.9999,"sy":1,"wave_r":0,"wave_g":0,"wave_b":0,"wave_x":0.5,"wave_y":0.5,"ob_size":0,"ob_r":0,"ob_g":0,"ob_b":0,"ob_a":1,"ib_size":0.26,"ib_r":0.25,"ib_g":0.25,"ib_b":0.25,"ib_a":0,"mv_x":31.999998,"mv_y":24.000004,"mv_dx":0,"mv_dy":0,"mv_l":0.5,"mv_r":0.2999,"mv_g":0.4999,"mv_b":0.3999,"mv_a":0,"b1n":0,"b2n":0,"b3n":0,"b1x":1,"b2x":1,"b3x":1,"b1ed":0.7},"shapes":[{"baseVals":{"enabled":1,"sides":3,"additive":0,"thickoutline":0,"textured":1,"x":0.5,"y":0.13,"rad":1.504994,"ang":0,"tex_ang":0,"tex_zoom":0.459514,"r":1,"g":0,"b":0,"a":1,"r2":1,"g2":0,"b2":0,"a2":0,"border_r":0.7,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":""},{"baseVals":{"enabled":0,"sides":63,"additive":0,"thickoutline":0,"textured":0,"x":0.5,"y":0.5,"rad":0.022167,"ang":0,"tex_ang":0,"tex_zoom":0.499805,"r":1,"g":1,"b":1,"a":0.1,"r2":1,"g2":1,"b2":1,"a2":0.07,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":""},{"baseVals":{"enabled":0,"sides":14,"additive":1,"thickoutline":0,"textured":1,"x":0.59,"y":0,"rad":1.215236,"ang":0.062832,"tex_ang":0,"tex_zoom":0.514935,"r":0.6,"g":0.5,"b":0.7,"a":0.1,"r2":0.7,"g2":0.5,"b2":0.6,"a2":0,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":"m.x=(0.5+(0.3*Math.cos(div(m.time,78)))); m.y=(0.5+(0.3*Math.sin(div(m.time,78)))); m.tex_zoom=div(0.2,(Math.sin(div(m.time,31))+1.1));"},{"baseVals":{"enabled":0,"sides":63,"additive":1,"thickoutline":0,"textured":1,"x":0.76,"y":0.75,"rad":0.686364,"ang":0.439823,"tex_ang":0.502655,"tex_zoom":0.6159,"r":0.7,"g":0.7,"b":0.7,"a":0.15,"r2":1,"g2":1,"b2":1,"a2":0,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":"m.x=(0.5+(0.3*Math.cos(div(m.time,59)))); m.y=(0.5+(0.3*Math.sin(div(m.time,59))));"}],"waves":[{"baseVals":{"enabled":1,"samples":247,"sep":9,"spectrum":0,"usedots":1,"thick":0,"additive":1,"scaling":0.067077,"smoothing":0.82,"r":0,"g":1,"b":0.5,"a":1},"init_eqs_str":"m.t1 = 0;\nm.k1 = 0;\nm.k2 = 0;\nm.mod = 0;\nm.t2 = 0;\nm.t3 = 0;\nm.t1=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3)); m.t2=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3)); m.t3=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3)); m.t4=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3)); m.t5=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3)); m.t6=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3)); m.t7=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3)); m.t8=(1+(((rand(101)*0.01)-(rand(101)*0.01))*0.3));\n\t\t\tm.rkeys = ['t1'];","frame_eqs_str":"m.t1=1; m.t3=Math.sin(div(m.time,2)); m.t3=Math.max(m.t3, 0); m.t3=(4.9*Math.min(m.t3, 0.2));","point_eqs_str":"m.t1=mod(((m.t1*67)+37),4096); m.t2=div(m.t1,4096); m.k1=mod(((100*m.sample)+(m.time*2)),2); m.k2=mod(((100*m.sample)+(m.time*5)),2); m.x=(0.49+(0.48*Math.sin(((m.sample*31)+div((m.t2*m.time),27))))); m.y=((0+(0.2*m.t2))+(0.2*Math.sin(((m.sample*131)+div((m.t2*m.time),37))))); m.mod=Math.sin(((m.sample*600)+(0.4*m.time))); m.mod=Math.max(m.mod, 0); m.mod=(3*Math.min(m.mod, 0.33)); m.a=1; m.r=0.02; m.b=(m.mod*0.6); m.g=(m.mod*(0.7+div(m.t2,4)));"},{"baseVals":{"enabled":1,"samples":512,"sep":0,"spectrum":0,"usedots":0,"thick":0,"additive":0,"scaling":0.891519,"smoothing":0.82,"r":1,"g":1,"b":1,"a":0.1},"init_eqs_str":"m.px = 0;\nm.t1 = 0;\nm.py = 0;\nm.k1 = 0;\nm.t2 = 0;\n\n\t\t\tm.rkeys = ['t1','t2'];","frame_eqs_str":"m.t1=1; m.t2=7;","point_eqs_str":"m.r=0.31; m.b=0; m.g=0.0; m.a=1; m.t1=mod(((m.t1*67)+37),4096); m.px=div((m.t1-2047),4096); m.t2=mod(((m.t2*67)+37),4096); m.py=div((m.t2-0),4096); m.k1=mod((m.sample*100),8); m.y=(div(m.py,3.5)+0.0); m.a=below(m.y, 0.2); m.x=(0.5+(0.4*Math.sin((m.sample*26))));"},{"baseVals":{"enabled":1,"samples":100,"sep":0,"spectrum":0,"usedots":0,"thick":0,"additive":0,"scaling":0.01,"smoothing":0.82,"r":1,"g":1,"b":1,"a":0.1},"init_eqs_str":"m.t5 = 0;\nm.t1 = 0;\nm.bird = 0;\nm.y0 = 0;\nm.dx = 0;\nm.t3 = 0;\nm.ground = 0;\nm.k1 = 0;\nm.t6 = 0;\nm.f1 = 0;\nm.trig = 0;\nm.dy = 0;\nm.t2 = 0;\nm.t4 = 0;\n\n\t\t\tm.rkeys = ['y0'];","frame_eqs_str":"m.t1=Math.sin((m.time*3)); m.t2=Math.cos((m.time*3)); m.t3=Math.sin(div(m.time,3)); m.t4=Math.cos(div(m.time,3)); m.t5=Math.cos(div(m.time,4)); m.ground=below(m.t5, -0.9); m.trig=below(rand(100), 1); m.trig=((m.trig*bnot(m.ground))*bnot(m.bird)); m.bird=(m.bird*bnot(m.ground)); m.bird=(bnot(m.bird)*m.trig); m.t6=m.bird;","point_eqs_str":"m.r=1; m.g=0; m.b=0; m.k1=below(m.sample, 0.5); m.dx=((0.02*m.k1)*Math.sin((m.sample*50))); m.f1=sqr(m.dx); m.dy=(((20*m.f1)*m.t1)+div(m.t2,150)); m.dy=(m.dy+(((1-m.k1)*0.004)*Math.sin((m.sample*50)))); m.x=((m.dx+0.5)+(0.1*m.t3)); m.dy=(m.dy+((0.2*m.dx)*m.t4)); m.y0=(m.y0+div(m.time,7)); m.y0=(m.y0-Math.floor(m.y0)); m.y0=m.t5; m.y=((m.dy+0.7)+div(m.y0,8)); m.a=0.04;"},{"baseVals":{"enabled":0,"samples":512,"sep":0,"spectrum":1,"usedots":1,"thick":0,"additive":0,"scaling":1,"smoothing":0.5,"r":1,"g":1,"b":1,"a":1},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":"","point_eqs_str":""}],"init_eqs_str":"m.index = 0;\nm.q22 = 0;\nm.q21 = 0;\nm.q29 = 0;\nm.dec_med = 0;\nm.movz = 0;\nm.movx = 0;\nm.rott = 0;\nm.is_beat = 0;\nm.q23 = 0;\nm.k1 = 0;\nm.q24 = 0;\nm.dec_slow = 0;\nm.q26 = 0;\nm.p2 = 0;\nm.avg = 0;\nm.beat = 0;\nm.p1 = 0;\nm.peak = 0;\nm.q27 = 0;\nm.p3 = 0;\nm.t0 = 0;\nm.q28 = 0;\nm.q30 = 0;\nm.q20 = 0;\nm.q28=0; m.q29=0; m.p1=0;","frame_eqs_str":"m.dec_med=pow(0.9, div(30,m.fps)); m.dec_slow=pow(0.99, div(30,m.fps)); m.beat=Math.max(Math.max(m.bass, m.mid), m.treb); m.avg=((m.avg*m.dec_slow)+(m.beat*(1-m.dec_slow))); m.is_beat=(above(m.beat, ((0.5+m.avg)+m.peak))*above(m.time, (m.t0+0.2))); m.t0=((m.is_beat*m.time)+((1-m.is_beat)*m.t0)); m.peak=((m.is_beat*m.beat)+(((1-m.is_beat)*m.peak)*m.dec_med)); m.index=mod((m.index+m.is_beat),8); m.q20=m.avg; m.q21=m.beat; m.q22=m.peak; m.q23=m.index; m.q24=m.is_beat; m.q26=((m.bass+m.mid)+m.treb); m.k1=(m.is_beat*equal(m.index, 0)); m.p1=((m.k1*(m.p1+1))+((1-m.k1)*m.p1)); m.p2=((m.dec_med*m.p2)+((1-m.dec_med)*m.p1)); m.p3=((m.dec_med*m.p3)+((1-m.dec_med)*m.p2)); m.rott=div((m.p3*3.1416),2); m.q27=(m.index+1); m.movz=(m.movz+(div((0.006*30),m.fps)*(1.5+Math.sin(m.rott)))); m.q29=m.movz; m.movx=(m.movx+(div((0.01*30),m.fps)*Math.sin(div(m.time,5)))); m.q28=m.movx; m.q30=(Math.sin(div(m.time,9))+2);\n\t\tm.rkeys = [];","pixel_eqs_str":"m.warp=0.02;","warp":"shader_body\n{\n  float k1_1;\n  float ky_2;\n  vec2 uv3_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = ((uv - vec2(0.5, 0.5)) * aspect.xy);\n  uv3_3 = (60.0 * tmpvar_4);\n  float tmpvar_5;\n  tmpvar_5 = dot (texture (sampler_noise_lq, uv), vec4(0.32, 0.49, 0.29, 0.0));\n  ky_2 = clamp (((\n    (-(uv3_3.y) / 50.0)\n   + \n    ((tmpvar_5 / 8.0) * cos((16.0 * tmpvar_5)))\n  ) + 0.2), 0.0, 1.0);\n  float tmpvar_6;\n  tmpvar_6 = (uv3_3.x * (2.0 - (0.3 * uv.y)));\n  k1_1 = (tmpvar_6 - (sign(tmpvar_6) * 24.0));\n  k1_1 = (k1_1 - (sign(k1_1) * 9.0));\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (6.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (12.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (18.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (24.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (30.0 * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  float tmpvar_7;\n  tmpvar_7 = clamp (k1_1, -1.6, 1.6);\n  k1_1 = tmpvar_7;\n  vec2 tmpvar_8;\n  tmpvar_8.x = (sin(tmpvar_7) / cos(tmpvar_7));\n  tmpvar_8.y = uv3_3.y;\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ((texture (sampler_main, fract(uv)).xyz * 0.5) + ((\n    cos(tmpvar_7)\n   * \n    (vec3((dot (texture (sampler_noise_hq, (tmpvar_8 * \n      ((texsize.xy * texsize_noise_hq.zw) * 0.05)\n    .x)), vec4(0.32, 0.49, 0.29, 0.0)) + 0.2)) * vec3(0.125, 0.02, 0.01))\n  ) * clamp (\n    (1.0 - pow ((2.4 * tmpvar_4.y), 6.0))\n  , 0.0, 1.0)));\n  ret = tmpvar_9.xyz;\n}\n\n","comp":"float xlat_mutabledist;\nfloat xlat_mutabledist2;\nvec3 xlat_mutableglow;\nfloat xlat_mutableinten;\nfloat xlat_mutablem;\nfloat xlat_mutablemask;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv3;\nvec2 xlat_mutableuv4;\nshader_body\n{\n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  int tmpvar_3;\n  tmpvar_3 = int(q29);\n  xlat_mutablem = (1.0 - float(tmpvar_3));\n  float tmpvar_4;\n  tmpvar_4 = -(q29);\n  xlat_mutabledist = (1.0 - fract((0.3333333 - \n    (fract(tmpvar_4) / 3.0)\n  )));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = (1.0 - xlat_mutabledist2);\n  xlat_mutableuv2 = (((q30 * xlat_mutabledist) * (uv_1 - 0.2)) - 0.2);\n  xlat_mutablemask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableuv3 = (fract((xlat_mutableuv2 + \n    ((xlat_mutablem + q28) * vec2(0.3, 0.0))\n  )) * xlat_mutablemask);\n  xlat_mutableglow = (((texture (sampler_blur1, xlat_mutableuv3).xyz * scale1) + bias1) * vec3(0.6, 1.0, 1.0));\n  xlat_mutableret1 = ((texture (sampler_main, xlat_mutableuv3).xyz + (2.0 * xlat_mutableglow)) * xlat_mutableinten);\n  xlat_mutablem = (2.0 - float(tmpvar_3));\n  xlat_mutabledist = (1.0 - fract((0.6666667 - \n    (fract(tmpvar_4) / 3.0)\n  )));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = (1.0 - xlat_mutabledist2);\n  xlat_mutableuv2 = (((q30 * xlat_mutabledist) * (uv_1 - 0.2)) - 0.2);\n  xlat_mutablemask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableuv3 = (fract((xlat_mutableuv2 + \n    ((xlat_mutablem + q28) * vec2(0.3, 0.0))\n  )) * xlat_mutablemask);\n  vec4 tmpvar_5;\n  tmpvar_5 = texture (sampler_main, xlat_mutableuv3);\n  xlat_mutableglow = (((texture (sampler_blur1, xlat_mutableuv3).xyz * scale1) + bias1) * vec3(0.6, 1.0, 1.0));\n  xlat_mutablemask = (1.0 - clamp ((12.0 * tmpvar_5.xyz), 0.0, 1.0)).x;\n  xlat_mutableret1 = ((xlat_mutableret1 * xlat_mutablemask) + ((tmpvar_5.xyz + \n    (2.0 * xlat_mutableglow)\n  ) * xlat_mutableinten));\n  xlat_mutablem = (3.0 - float(tmpvar_3));\n  xlat_mutabledist = (1.0 - fract((1.0 - \n    (fract(tmpvar_4) / 3.0)\n  )));\n  xlat_mutabledist2 = (xlat_mutabledist * xlat_mutabledist);\n  xlat_mutableinten = (1.0 - xlat_mutabledist2);\n  xlat_mutableuv2 = (((q30 * xlat_mutabledist) * (uv_1 - 0.2)) - 0.2);\n  xlat_mutablemask = (float((xlat_mutableuv2.y <= 0.0)) * float((xlat_mutableuv2.y >= -1.0)));\n  xlat_mutableuv3 = (fract((xlat_mutableuv2 + \n    ((xlat_mutablem + q28) * vec2(0.3, 0.0))\n  )) * xlat_mutablemask);\n  vec4 tmpvar_6;\n  tmpvar_6 = texture (sampler_main, xlat_mutableuv3);\n  xlat_mutableglow = (((texture (sampler_blur1, xlat_mutableuv3).xyz * scale1) + bias1) * vec3(0.6, 1.0, 1.0));\n  xlat_mutablemask = (1.0 - clamp ((12.0 * tmpvar_6.xyz), 0.0, 1.0)).x;\n  xlat_mutableret1 = ((xlat_mutableret1 * xlat_mutablemask) + ((tmpvar_6.xyz + \n    (2.0 * xlat_mutableglow)\n  ) * xlat_mutableinten));\n  xlat_mutableuv4 = (uv_1 + vec2(-0.3, 0.1));\n  float tmpvar_7;\n  tmpvar_7 = (0.5 * clamp ((1.0/(\n    (abs(uv_1.y) + 0.1)\n  )), 0.0, 12.0));\n  vec2 tmpvar_8;\n  tmpvar_8.x = (uv_1.x * tmpvar_7);\n  tmpvar_8.y = tmpvar_7;\n  float tmpvar_9;\n  tmpvar_9 = clamp ((1.0 - (8.0 * xlat_mutableret1.x)), 0.0, 1.0);\n  vec3 tmpvar_10;\n  tmpvar_10.x = (0.4 * clamp ((1.0 - \n    (4.0 * uv_1.y)\n  ), 0.0, 1.0));\n  tmpvar_10.y = (0.4 * clamp ((1.0 - \n    (2.0 * uv_1.y)\n  ), 0.0, 1.0));\n  tmpvar_10.z = clamp ((1.0 - (3.0 * uv_1.y)), 0.0, 1.0);\n  ret_2 = ((xlat_mutableret1 * vec3(0.0, 1.0, 1.0)) + ((0.25 * tmpvar_10) * tmpvar_9));\n  ret_2 = (ret_2 + ((vec3(\n    dot (texture (sampler_noise_hq, (tmpvar_8 + (0.04 * time))), vec4(0.32, 0.49, 0.29, 0.0))\n  ) * \n    ((clamp ((1.0 - \n      (16.0 * uv_1.y)\n    ), 0.0, 1.0) * 0.02) / (0.01 + sqrt(dot (xlat_mutableuv4, xlat_mutableuv4))))\n  ) * tmpvar_9));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ret_2;\n  ret = tmpvar_11.xyz;\n}\n\n"}