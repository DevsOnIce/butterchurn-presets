{"baseVals":{"rating":5,"gammaadj":1,"decay":0.94,"echo_zoom":1.053,"echo_alpha":1,"echo_orient":3,"wave_mode":2,"additivewave":1,"wave_brighten":0,"brighten":1,"wave_a":0.001,"wave_scale":0.01,"wave_smoothing":0.63,"wave_mystery":-1,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":0.07,"zoomexp":0.88027,"zoom":100,"rot":1,"dx":1,"dy":-1,"warp":0.01,"wave_r":0.65,"wave_g":0.65,"wave_b":0.65,"ob_size":0,"ib_size":0,"ib_r":1,"ib_g":1,"ib_b":1,"mv_x":12.8,"mv_y":9.6,"mv_l":0,"mv_g":0.91,"mv_b":0.71,"mv_a":0,"b1ed":1},"shapes":[{"baseVals":{"enabled":1,"sides":25,"textured":1,"rad":0.80813,"ang":6.28319,"tex_zoom":0.65308,"g":0.8,"r2":1,"g2":0,"border_a":0},"init_eqs_str":"m.q7 = 0;\nm.q8 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.x=(0.5+m.q7); m.y=(0.5+m.q8); m.ang=m.time;"},{"baseVals":{"enabled":1,"sides":88,"additive":1,"textured":1,"y":0.7,"rad":0.39711,"ang":6.28319,"tex_ang":6.28319,"tex_zoom":0.65309,"r":0,"g":0.5,"b":1,"r2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"m.q5 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.tex_zoom=(((Math.sin(m.time)*0.5)+0.5)*0.2); m.y=(0.1-m.q5);"},{"baseVals":{"enabled":1,"sides":100,"additive":1,"textured":1,"rad":0.763,"ang":3.14159,"tex_zoom":0.08081,"r":0,"a":0,"r2":1,"g2":0.4,"b2":0.1,"border_a":0},"init_eqs_str":"m.q7 = 0;\nm.q8 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.x=(0.5+m.q7); m.y=(0.5+m.q8); m.a=((Math.cos(m.time)*0.5)+0.5);"},{"baseVals":{"enabled":1,"sides":100,"textured":1,"rad":0.20882,"ang":1.88496,"tex_ang":3.14159,"tex_zoom":0.32544,"g":1,"b":1,"g2":0,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"m.d = 0;\nm.q7 = 0;\nm.q8 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.x=(0.5-m.q7); m.y=(0.5-m.q8); m.d=(Math.abs((m.x-0.5))+Math.abs((m.y-0.5))); m.tex_ang=m.time; m.r=m.bass; m.ang=(((Math.cos(m.time)*0.5)+0.5)*6.28);"}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.tic = 0;\nm.q1 = 0;\nm.mid_avg = 0;\nm.tin = 0;\nm.bass_avg = 0;\nm.vav = 0;\nm.q4 = 0;\nm.rd = 0;\nm.mt = 0;\nm.ra = 0;\nm.treb_avg = 0;\nm.q2 = 0;\nm.q3 = 0;\nm.q7 = 0;\nm.rb = 0;\nm.q8 = 0;\nm.zoom=1; m.xpos=0; m.ypos=0;","frame_eqs_str":"m.warp=0; m.tic=Math.min((m.time-m.tin), 0.1); m.tin=m.time; m.ra=10; m.treb_avg=(m.tic*((m.treb_avg*(div(1,m.tic)-m.ra))+(m.ra*m.treb))); m.mid_avg=(m.tic*((m.mid_avg*(div(1,m.tic)-m.ra))+(m.ra*m.mid))); m.bass_avg=(m.tic*((m.bass_avg*(div(1,m.tic)-m.ra))+(m.ra*m.bass))); m.rb=1; m.vav=(m.tic*((m.vav*(div(1,m.tic)-m.rb))+((m.rb*((m.bass+m.treb)+m.mid))*0.33333))); m.q1=m.treb_avg; m.q2=m.mid_avg; m.q3=m.bass_avg; m.q4=m.vav; m.mt=((m.mt+((m.tic*m.vav)*100))*below(m.mt, 10000)); m.q7=(Math.sin((m.mt*0.02))*0.1); m.q8=(Math.sin((m.mt*0.01))*0.1); m.dx=(Math.cos((m.mt*0.1))*0.07); m.dy=(Math.cos((m.mt*0.069))*0.07); m.monitor=m.mt;\n\t\tm.rkeys = [];","pixel_eqs_str":"m.rd=sqrt((sqr((((m.x-0.5)-m.q7)*1.5))+sqr((((m.x+0.3)+m.q8)*1.5)))); m.zoom=(((m.rd*m.rad)*m.rad)+(m.treb*0.01));","warp":"shader_body\n{\n  vec3 ret_1;\n  ret_1 = (texture (sampler_main, fract(uv)).xyz + (0.34 + rad));\n  float tmpvar_2;\n  tmpvar_2 = (rad * rad);\n  ret_1 = (ret_1 - (0.55 + (tmpvar_2 * \n    (tmpvar_2 * rad)\n  )));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n}\n\n","comp":"shader_body\n{\n  vec2 uv_1;\n  vec3 ret_2;\n  uv_1 = (uv + texture (sampler_pw_noise_lq, ((\n    (floor((uv * vec2(10.0, 10.0))) * 0.1)\n   + rand_preset.xy) * aspect.xy)).xy);\n  ret_2 = -(((rand_preset.xyz * vec3(0.0, 1.5, 0.5)) * (\n    (texture (sampler_blur1, fract(uv_1)).xyz * scale1)\n   + bias1).yyy));\n  ret_2 = (ret_2 - mix (ret_2, (rand_preset.xyz * vec3(1.8, 0.5, 2.0)), (\n    (texture (sampler_blur2, fract(uv_1)).xyz * scale2)\n   + bias2).zzz));\n  vec3 tmpvar_3;\n  tmpvar_3 = mix (mix (ret_2, (rand_preset.yyy * vec3(-0.45, 0.25, 0.5)), texture (sampler_main, fract(uv_1)).yyy), (rand_preset.zzz * vec3(1.15, 0.75, -0.2)), texture (sampler_main, fract(uv_1)).zzz);\n  ret_2 = (tmpvar_3 - ((1.25 * tmpvar_3) * (vec3(1.0, 1.0, 1.0) + \n    (0.15 - (0.8 * texture (sampler_main, uv).xzy))\n  )));\n  vec3 tmpvar_4;\n  tmpvar_4 = pow (ret_2, (rand_preset.xyz - ret_2));\n  ret_2 = (tmpvar_4 * tmpvar_4);\n  vec4 tmpvar_5;\n  tmpvar_5.w = 1.0;\n  tmpvar_5.xyz = ret_2;\n  ret = tmpvar_5.xyz;\n}\n\n"}