{"baseVals":{"rating":4,"decay":0.9,"echo_zoom":1.006596,"echo_alpha":0.5,"echo_orient":1,"wave_mode":1,"wrap":0,"brighten":1,"wave_a":0.001,"zoom":0.96,"rot":-6.279995,"warp":0.000521,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":1,"ob_g":1,"ob_b":1,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"rad":2.667177,"tex_zoom":0.451117,"g":1,"a":0.15,"g2":0,"a2":0.05},"init_eqs_str":"m.q1 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.r=(0.1+(0.5*Math.sin(m.q1))); m.g=(0.1+(0.5*Math.sin((m.q1*0.9878)))); m.b=(0.1+(0.5*Math.sin((m.q1*0.897))));"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"sides":100,"g":1,"b":1,"r2":1,"g2":0,"b2":1,"a2":1},"init_eqs_str":"m.q1 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.x=(0.5+(0.02*Math.sin(((m.time*0.5)+1.68)))); m.y=(0.5+(0.02*Math.cos(((m.time*0.5)+1.68)))); m.r=(0.1+(0.5*Math.sin((m.q1*0.0144)))); m.g=(0.1+(0.5*Math.sin((m.q1*0.05878)))); m.b=(0.1+(0.5*Math.sin((m.q1*0.0797)))); m.r2=(0.1+(0.5*Math.sin((m.q1*0.065)))); m.g2=(0.1+(0.5*Math.sin((m.q1*0.07878)))); m.b2=(0.1+(0.5*Math.sin((m.q1*0.0897))));"}],"waves":[{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"a":0.1},"init_eqs_str":"m.xx = 0;\nm.s = 0;\nm.xs = 0;\nm.ss = 0;\nm.zn = 0;\nm.q1 = 0;\nm.xd = 0;\nm.zd = 0;\nm.v = 0;\nm.yx = 0;\nm.angle2 = 0;\nm.zs = 0;\nm.angle = 0;\nm.ys = 0;\nm.xn = 0;\nm.yd = 0;\nm.angle3 = 0;\nm.yn = 0;\nm.u = 0;\nm.zx = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"","point_eqs_str":"m.u=(Math.abs(Math.cos((m.q1*0.1)))*3.14159); m.v=((Math.abs(Math.cos((m.q1*0.015)))*3.14159)*2); m.s=((m.sample*3.14)*100); m.ss=((m.sample*6.28)*1000); m.xs=((0.3*Math.sin(m.s))*Math.cos(m.ss)); m.ys=((0.3*Math.sin(m.s))*Math.sin(m.ss)); m.zs=(0.3*Math.cos(m.s)); m.angle=(Math.sin((m.q1*0.027))*6.28); m.yx=((m.ys*Math.cos(m.angle))-(m.zs*Math.sin(m.angle))); m.zx=((m.ys*Math.sin(m.angle))+(m.zs*Math.cos(m.angle))); m.xx=m.xs; m.angle2=(Math.sin((m.q1*0.03))*6.28); m.xd=((m.xx*Math.cos(m.angle2))-(m.zx*Math.sin(m.angle2))); m.zd=((m.xx*Math.sin(m.angle2))+(m.zx*Math.cos(m.angle2))); m.yd=m.yx; m.angle3=(Math.sin((m.q1*0.028))*6.28); m.xn=((m.xd*Math.cos(m.angle3))-(m.yd*Math.sin(m.angle3))); m.yn=((m.xd*Math.sin(m.angle3))+(m.yd*Math.cos(m.angle3))); m.zd=(m.zd+2); m.x=(((m.xn*m.zd)*0.3)+0.5); m.y=((((m.yn*m.zd)*0.3)*1.2)+0.5); m.r=((0.5+(0.5*Math.sin((((m.q1*0.2)+m.x)+m.x))))+m.xn); m.g=((0.5+(0.5*Math.sin((((m.q1*0.5)+m.x)+m.y))))+m.yn); m.b=((0.5+(0.5*Math.sin((((m.q1*0.36)+m.y)+m.y))))+m.zn);"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"m.xx = 0;\nm.s = 0;\nm.xs = 0;\nm.xdriftinc = 0;\nm.yval = 0;\nm.ss = 0;\nm.q1 = 0;\nm.xd = 0;\nm.zd = 0;\nm.alphax = 0;\nm.yx = 0;\nm.angle2 = 0;\nm.zs = 0;\nm.angle = 0;\nm.ys = 0;\nm.xn = 0;\nm.burstspeed = 0;\nm.yd = 0;\nm.burst = 0;\nm.angle3 = 0;\nm.state = 0;\nm.yn = 0;\nm.ymax = 0;\nm.q3 = 0;\nm.xdrift = 0;\nm.zx = 0;\nm.flag = 0;\n\n\t\t\tm.rkeys = ['xdriftinc','yval','alphax','burstspeed','burst','state','ymax','xdrift'];","frame_eqs_str":"","point_eqs_str":"m.flag=above(m.q3, 2); m.state=(m.state+(m.flag*equal(m.state, 0))); m.yval=((equal(m.state, 0)!=0)?(0):(m.yval)); m.yval=(m.yval+(0.00004*equal(m.state, 1))); m.ymax=((equal(m.state, 0)!=0)?((Math.floor(rand(100))*0.004)):(m.ymax)); m.state=((above(m.yval, (0.5+m.ymax))!=0)?(2):(m.state)); m.yval=((equal(m.state, 0)!=0)?(0):(m.yval)); m.burst=((equal(m.state, 0)!=0)?(0.001):(m.burst)); m.alphax=((equal(m.state, 0)!=0)?(1):(m.alphax)); m.xdriftinc=((equal(m.state, 0)!=0)?(0):(m.xdriftinc)); m.burstspeed=((equal(m.state, 0)!=0)?(Math.floor(rand(10))):(m.burstspeed)); m.xdrift=((equal(m.state, 0)!=0)?(Math.floor(rand(20))):(m.xdrift)); m.xdriftinc=(((((((((((((((((((m.xdriftinc+((equal(m.xdrift, 0)*equal(m.state, 1))*0.00002))+((equal(m.xdrift, 1)*equal(m.state, 1))*0.000018))+((equal(m.xdrift, 2)*equal(m.state, 1))*0.000016))+((equal(m.xdrift, 3)*equal(m.state, 1))*0.000014))+((equal(m.xdrift, 4)*equal(m.state, 1))*0.000012))+((equal(m.xdrift, 5)*equal(m.state, 1))*0.00001))+((equal(m.xdrift, 6)*equal(m.state, 1))*0.000008))+((equal(m.xdrift, 7)*equal(m.state, 1))*0.000006))+((equal(m.xdrift, 8)*equal(m.state, 1))*0.000004))+((equal(m.xdrift, 9)*equal(m.state, 1))*0.000002))+((equal(m.xdrift, 11)*equal(m.state, 1))*-0.000002))+((equal(m.xdrift, 12)*equal(m.state, 1))*-0.000004))+((equal(m.xdrift, 13)*equal(m.state, 1))*-0.000006))+((equal(m.xdrift, 14)*equal(m.state, 1))*-0.000008))+((equal(m.xdrift, 15)*equal(m.state, 1))*-0.00001))+((equal(m.xdrift, 16)*equal(m.state, 1))*-0.000012))+((equal(m.xdrift, 17)*equal(m.state, 1))*-0.000014))+((equal(m.xdrift, 18)*equal(m.state, 1))*-0.000016))+((equal(m.xdrift, 19)*equal(m.state, 1))*-0.000018)); m.burst=((((((((((m.burst+((equal(m.burstspeed, 0)*equal(m.state, 2))*0.000024))+((equal(m.burstspeed, 1)*equal(m.state, 2))*0.000022))+((equal(m.burstspeed, 2)*equal(m.state, 2))*0.00002))+((equal(m.burstspeed, 3)*equal(m.state, 2))*0.000018))+((equal(m.burstspeed, 4)*equal(m.state, 2))*0.000016))+((equal(m.burstspeed, 5)*equal(m.state, 2))*0.000014))+((equal(m.burstspeed, 6)*equal(m.state, 2))*0.000012))+((equal(m.burstspeed, 7)*equal(m.state, 2))*0.00001))+((equal(m.burstspeed, 8)*equal(m.state, 2))*0.000008))+((equal(m.burstspeed, 9)*equal(m.state, 2))*0.000008)); m.alphax=(m.alphax-(0.00004*equal(m.state, 2))); m.state=((below(m.alphax, 0)!=0)?(0):(m.state)); m.s=((m.sample*3.14)*100); m.ss=((m.sample*6.28)*1000); m.xs=((m.burst+(0.0001*Math.cos(m.s)))*Math.cos(m.ss)); m.ys=((m.burst+(0.0001*Math.cos(m.s)))*Math.sin(m.ss)); m.zs=((0.1*m.burst)*Math.sin(m.s)); m.angle=(Math.sin((-m.q1*0.035))*6.28); m.yx=((m.ys*Math.cos(m.angle))-(m.zs*Math.sin(m.angle))); m.zx=((m.ys*Math.sin(m.angle))+(m.zs*Math.cos(m.angle))); m.xx=m.xs; m.angle2=(Math.sin((m.q1*0.03))*6.28); m.xd=((m.xx*Math.cos(m.angle2))-(m.zx*Math.sin(m.angle2))); m.zd=((m.xx*Math.sin(m.angle2))+(m.zx*Math.cos(m.angle2))); m.yd=m.yx; m.angle3=(Math.sin((-m.q1*0.032))*6.28); m.xn=((m.xd*Math.cos(m.angle3))-(m.yd*Math.sin(m.angle3))); m.yn=((m.xd*Math.sin(m.angle3))+(m.yd*Math.cos(m.angle3))); m.zd=(m.zd+2); m.x=(((m.xn*m.zd)*0.3)+0.5); m.y=(((m.yn*m.zd)*0.3)*1.2); m.x=(m.x+m.xdriftinc); m.y=((m.y+Math.sin((m.yval*1.5)))-0.18); m.r=(0.5+(0.5*Math.sin((((m.q1*1.7)+m.x)+m.x)))); m.g=(0.5+(0.5*Math.sin((((m.q1*1.5)+m.x)+m.y)))); m.b=(0.5+(0.5*Math.sin((((m.q1*1.16)+m.y)+m.y))));"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"m.xx = 0;\nm.s = 0;\nm.xs = 0;\nm.xdriftinc = 0;\nm.yval = 0;\nm.ss = 0;\nm.q1 = 0;\nm.xd = 0;\nm.zd = 0;\nm.alphax = 0;\nm.yx = 0;\nm.angle2 = 0;\nm.zs = 0;\nm.angle = 0;\nm.ys = 0;\nm.xn = 0;\nm.burstspeed = 0;\nm.yd = 0;\nm.burst = 0;\nm.angle3 = 0;\nm.state = 0;\nm.yn = 0;\nm.ymax = 0;\nm.q3 = 0;\nm.xdrift = 0;\nm.zx = 0;\nm.flag = 0;\n\n\t\t\tm.rkeys = ['xdriftinc','yval','alphax','burstspeed','burst','state','ymax','xdrift'];","frame_eqs_str":"","point_eqs_str":"m.flag=above(m.q3, 2); m.state=(m.state+(m.flag*equal(m.state, 0))); m.yval=((equal(m.state, 0)!=0)?(0):(m.yval)); m.yval=(m.yval+(0.00004*equal(m.state, 1))); m.ymax=((equal(m.state, 0)!=0)?((Math.floor(rand(100))*0.004)):(m.ymax)); m.state=((above(m.yval, (0.5+m.ymax))!=0)?(2):(m.state)); m.yval=((equal(m.state, 0)!=0)?(0):(m.yval)); m.burst=((equal(m.state, 0)!=0)?(0.001):(m.burst)); m.alphax=((equal(m.state, 0)!=0)?(1):(m.alphax)); m.xdriftinc=((equal(m.state, 0)!=0)?(0):(m.xdriftinc)); m.burstspeed=((equal(m.state, 0)!=0)?(Math.floor(rand(10))):(m.burstspeed)); m.xdrift=((equal(m.state, 0)!=0)?(Math.floor(rand(20))):(m.xdrift)); m.xdriftinc=(((((((((((((((((((m.xdriftinc+((equal(m.xdrift, 0)*equal(m.state, 1))*0.00002))+((equal(m.xdrift, 1)*equal(m.state, 1))*0.000018))+((equal(m.xdrift, 2)*equal(m.state, 1))*0.000016))+((equal(m.xdrift, 3)*equal(m.state, 1))*0.000014))+((equal(m.xdrift, 4)*equal(m.state, 1))*0.000012))+((equal(m.xdrift, 5)*equal(m.state, 1))*0.00001))+((equal(m.xdrift, 6)*equal(m.state, 1))*0.000008))+((equal(m.xdrift, 7)*equal(m.state, 1))*0.000006))+((equal(m.xdrift, 8)*equal(m.state, 1))*0.000004))+((equal(m.xdrift, 9)*equal(m.state, 1))*0.000002))+((equal(m.xdrift, 11)*equal(m.state, 1))*-0.000002))+((equal(m.xdrift, 12)*equal(m.state, 1))*-0.000004))+((equal(m.xdrift, 13)*equal(m.state, 1))*-0.000006))+((equal(m.xdrift, 14)*equal(m.state, 1))*-0.000008))+((equal(m.xdrift, 15)*equal(m.state, 1))*-0.00001))+((equal(m.xdrift, 16)*equal(m.state, 1))*-0.000012))+((equal(m.xdrift, 17)*equal(m.state, 1))*-0.000014))+((equal(m.xdrift, 18)*equal(m.state, 1))*-0.000016))+((equal(m.xdrift, 19)*equal(m.state, 1))*-0.000018)); m.burst=((((((((((m.burst+((equal(m.burstspeed, 0)*equal(m.state, 2))*0.000024))+((equal(m.burstspeed, 1)*equal(m.state, 2))*0.000022))+((equal(m.burstspeed, 2)*equal(m.state, 2))*0.00002))+((equal(m.burstspeed, 3)*equal(m.state, 2))*0.000018))+((equal(m.burstspeed, 4)*equal(m.state, 2))*0.000016))+((equal(m.burstspeed, 5)*equal(m.state, 2))*0.000014))+((equal(m.burstspeed, 6)*equal(m.state, 2))*0.000012))+((equal(m.burstspeed, 7)*equal(m.state, 2))*0.00001))+((equal(m.burstspeed, 8)*equal(m.state, 2))*0.000008))+((equal(m.burstspeed, 9)*equal(m.state, 2))*0.000008)); m.alphax=(m.alphax-(0.00004*equal(m.state, 2))); m.state=((below(m.alphax, 0)!=0)?(0):(m.state)); m.s=((m.sample*3.14)*100); m.ss=((m.sample*6.28)*1000); m.xs=(((m.burst*0.8)+((0.4*m.burst)*Math.cos(m.s)))*Math.cos(m.ss)); m.ys=(((m.burst*0.8)+((0.4*m.burst)*Math.cos(m.s)))*Math.sin(m.ss)); m.zs=((0.4*m.burst)*Math.sin(m.s)); m.angle=(Math.sin((-m.q1*0.015))*6.28); m.yx=((m.ys*Math.cos(m.angle))-(m.zs*Math.sin(m.angle))); m.zx=((m.ys*Math.sin(m.angle))+(m.zs*Math.cos(m.angle))); m.xx=m.xs; m.angle2=(Math.sin((m.q1*0.01579))*6.28); m.xd=((m.xx*Math.cos(m.angle2))-(m.zx*Math.sin(m.angle2))); m.zd=((m.xx*Math.sin(m.angle2))+(m.zx*Math.cos(m.angle2))); m.yd=m.yx; m.angle3=(Math.sin((m.q1*0.022))*6.28); m.xn=((m.xd*Math.cos(m.angle3))-(m.yd*Math.sin(m.angle3))); m.yn=((m.xd*Math.sin(m.angle3))+(m.yd*Math.cos(m.angle3))); m.zd=(m.zd+2); m.x=(((m.xn*m.zd)*0.3)+0.5); m.y=(((m.yn*m.zd)*0.3)*1.2); m.x=(m.x+m.xdriftinc); m.y=((m.y+Math.sin((m.yval*1.5)))-0.18); m.r=(0.5+(0.5*Math.sin((((m.q1*1.27)+m.x)+m.x)))); m.g=(0.5+(0.5*Math.sin((((m.q1*1.5)+m.x)+m.y)))); m.b=(0.5+(0.5*Math.sin((((m.q1*1.346)+m.y)+m.y))));"},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"thick":1,"additive":1},"init_eqs_str":"m.xx = 0;\nm.s = 0;\nm.xs = 0;\nm.xdriftinc = 0;\nm.yval = 0;\nm.ss = 0;\nm.q1 = 0;\nm.xd = 0;\nm.zd = 0;\nm.alphax = 0;\nm.yx = 0;\nm.angle2 = 0;\nm.zs = 0;\nm.angle = 0;\nm.ys = 0;\nm.xn = 0;\nm.burstspeed = 0;\nm.yd = 0;\nm.burst = 0;\nm.angle3 = 0;\nm.state = 0;\nm.yn = 0;\nm.ymax = 0;\nm.q3 = 0;\nm.xdrift = 0;\nm.zx = 0;\nm.flag = 0;\n\n\t\t\tm.rkeys = ['xdriftinc','yval','alphax','burstspeed','burst','state','ymax','xdrift'];","frame_eqs_str":"","point_eqs_str":"m.flag=above(m.q3, 2); m.state=(m.state+(m.flag*equal(m.state, 0))); m.yval=((equal(m.state, 0)!=0)?(0):(m.yval)); m.yval=(m.yval+(0.00004*equal(m.state, 1))); m.ymax=((equal(m.state, 0)!=0)?((Math.floor(rand(100))*0.004)):(m.ymax)); m.state=((above(m.yval, (0.5+m.ymax))!=0)?(2):(m.state)); m.yval=((equal(m.state, 0)!=0)?(0):(m.yval)); m.burst=((equal(m.state, 0)!=0)?(0.001):(m.burst)); m.alphax=((equal(m.state, 0)!=0)?(1):(m.alphax)); m.xdriftinc=((equal(m.state, 0)!=0)?(0):(m.xdriftinc)); m.burstspeed=((equal(m.state, 0)!=0)?(Math.floor(rand(10))):(m.burstspeed)); m.xdrift=((equal(m.state, 0)!=0)?(Math.floor(rand(20))):(m.xdrift)); m.xdriftinc=(((((((((((((((((((m.xdriftinc+((equal(m.xdrift, 0)*equal(m.state, 1))*0.00002))+((equal(m.xdrift, 1)*equal(m.state, 1))*0.000018))+((equal(m.xdrift, 2)*equal(m.state, 1))*0.000016))+((equal(m.xdrift, 3)*equal(m.state, 1))*0.000014))+((equal(m.xdrift, 4)*equal(m.state, 1))*0.000012))+((equal(m.xdrift, 5)*equal(m.state, 1))*0.00001))+((equal(m.xdrift, 6)*equal(m.state, 1))*0.000008))+((equal(m.xdrift, 7)*equal(m.state, 1))*0.000006))+((equal(m.xdrift, 8)*equal(m.state, 1))*0.000004))+((equal(m.xdrift, 9)*equal(m.state, 1))*0.000002))+((equal(m.xdrift, 11)*equal(m.state, 1))*-0.000002))+((equal(m.xdrift, 12)*equal(m.state, 1))*-0.000004))+((equal(m.xdrift, 13)*equal(m.state, 1))*-0.000006))+((equal(m.xdrift, 14)*equal(m.state, 1))*-0.000008))+((equal(m.xdrift, 15)*equal(m.state, 1))*-0.00001))+((equal(m.xdrift, 16)*equal(m.state, 1))*-0.000012))+((equal(m.xdrift, 17)*equal(m.state, 1))*-0.000014))+((equal(m.xdrift, 18)*equal(m.state, 1))*-0.000016))+((equal(m.xdrift, 19)*equal(m.state, 1))*-0.000018)); m.burst=((((((((((m.burst+((equal(m.burstspeed, 0)*equal(m.state, 2))*0.000024))+((equal(m.burstspeed, 1)*equal(m.state, 2))*0.000022))+((equal(m.burstspeed, 2)*equal(m.state, 2))*0.00002))+((equal(m.burstspeed, 3)*equal(m.state, 2))*0.000018))+((equal(m.burstspeed, 4)*equal(m.state, 2))*0.000016))+((equal(m.burstspeed, 5)*equal(m.state, 2))*0.000014))+((equal(m.burstspeed, 6)*equal(m.state, 2))*0.000012))+((equal(m.burstspeed, 7)*equal(m.state, 2))*0.00001))+((equal(m.burstspeed, 8)*equal(m.state, 2))*0.000008))+((equal(m.burstspeed, 9)*equal(m.state, 2))*0.000008)); m.alphax=(m.alphax-(0.00004*equal(m.state, 2))); m.state=((below(m.alphax, 0)!=0)?(0):(m.state)); m.s=((m.sample*3.14)*100); m.ss=((m.sample*6.28)*1000); m.xs=((m.burst+(0.1*Math.cos(m.s)))*Math.cos(m.ss)); m.ys=((m.burst+(0.1*Math.cos(m.s)))*Math.sin(m.ss)); m.zs=((0.1*m.burst)*Math.sin(m.s)); m.angle=(Math.sin((-m.q1*0.035))*6.28); m.yx=((m.ys*Math.cos(m.angle))-(m.zs*Math.sin(m.angle))); m.zx=((m.ys*Math.sin(m.angle))+(m.zs*Math.cos(m.angle))); m.xx=m.xs; m.angle2=(Math.sin((-m.q1*0.03))*6.28); m.xd=((m.xx*Math.cos(m.angle2))-(m.zx*Math.sin(m.angle2))); m.zd=((m.xx*Math.sin(m.angle2))+(m.zx*Math.cos(m.angle2))); m.yd=m.yx; m.angle3=(Math.sin((-m.q1*0.022))*6.28); m.xn=((m.xd*Math.cos(m.angle3))-(m.yd*Math.sin(m.angle3))); m.yn=((m.xd*Math.sin(m.angle3))+(m.yd*Math.cos(m.angle3))); m.zd=(m.zd+2); m.x=(((m.xn*m.zd)*0.3)+0.5); m.y=(((m.yn*m.zd)*0.3)*1.2); m.x=(m.x+m.xdriftinc); m.y=((m.y+Math.sin((m.yval*1.5)))-0.18); m.r=(0.5+(0.5*Math.sin((((m.q1*1.3)+m.x)+m.x)))); m.g=(0.5+(0.5*Math.sin((((m.q1*1.1)+m.x)+m.y)))); m.b=(0.5+(0.5*Math.sin((((m.q1*1.66)+m.y)+m.y))));"}],"init_eqs_str":"m.basstime = 0;\nm.stickybit = 0;\nm.volavg2 = 0;\nm.q1 = 0;\nm.q9 = 0;\nm.sample1 = 0;\nm.difftime = 0;\nm.diff = 0;\nm.edge = 0;\nm.volavg = 0;\nm.bit2 = 0;\nm.vol = 0;\nm.q2 = 0;\nm.q3 = 0;\nm.basssum = 0;\nm.sample2 = 0;\nm.state=0;","frame_eqs_str":"m.basstime=(m.basstime+(m.bass*0.06)); m.q1=m.basstime; m.q9=(m.basstime*0.000005); m.basstime=((below(m.basstime, 1000)!=0)?(1000):(m.basstime)); m.vol=pow(((m.bass+m.mid)+m.treb), 2); m.basssum=m.vol; m.stickybit=mod(m.time,2); m.volavg=(m.volavg+(m.vol*equal(m.stickybit, 1))); m.sample1=(m.sample1+equal(m.stickybit, 1)); m.volavg2=(m.volavg2+(m.vol*equal(m.stickybit, 0))); m.sample2=(m.sample2+equal(m.stickybit, 0)); m.edge=bnot(equal(m.bit2, m.stickybit)); m.volavg=(m.volavg-((m.volavg*m.edge)*m.stickybit)); m.volavg2=(m.volavg2-((m.volavg2*m.edge)*equal(m.stickybit, 0))); m.sample1=(m.sample1-((m.sample1*m.edge)*m.stickybit)); m.sample2=(m.sample2-((m.sample2*m.edge)*equal(m.stickybit, 0))); m.diff=((equal(m.stickybit, 1)!=0)?(div(m.basssum,div(m.volavg2,m.sample2))):(0)); m.diff=((equal(m.stickybit, 0)!=0)?(div(m.basssum,div(m.volavg,m.sample1))):(m.diff)); m.q3=m.diff; m.bit2=mod(m.time,2); m.difftime=(m.difftime+(m.diff*0.03)); m.q2=m.difftime; m.difftime=((above(m.difftime, 2000)!=0)?(0):(m.difftime)); m.monitor=m.q1;\n\t\tm.rkeys = [];","pixel_eqs_str":"m.zoom=1;","warp":"shader_body\n{\n  float final_noise_1;\n  vec3 tmpvar_2;\n  tmpvar_2.xy = uv;\n  tmpvar_2.z = (q1 * 0.1);\n  final_noise_1 = ((texture (sampler_noisevol_lq, tmpvar_2) * 2.0) - 1.0).x;\n  final_noise_1 = (final_noise_1 + (0.5 * (\n    (texture (sampler_noisevol_hq, (tmpvar_2 * 2.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + (0.25 * (\n    (texture (sampler_noisevol_lq, (tmpvar_2 * 4.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (final_noise_1 + (0.125 * (\n    (texture (sampler_noisevol_hq, (tmpvar_2 * 8.0)) * 2.0)\n   - 1.0)).x);\n  final_noise_1 = (1.0 + (final_noise_1 * 0.02));\n  mat2 tmpvar_3;\n  float tmpvar_4;\n  tmpvar_4 = cos(q9);\n  tmpvar_3[uint(0)].x = tmpvar_4;\n  float tmpvar_5;\n  tmpvar_5 = sin(q9);\n  tmpvar_3[uint(0)].y = -(tmpvar_5);\n  tmpvar_3[1u].x = tmpvar_5;\n  tmpvar_3[1u].y = tmpvar_4;\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = texture (sampler_main, (((\n    ((uv - 0.5) * (tmpvar_3 * final_noise_1))\n   * \n    (1.0 - ((rad * 0.05) * (0.9 + (bass * 0.1))))\n  ) * final_noise_1) + 0.5)).xyz;\n  ret = tmpvar_6.xyz;\n}\n\n","comp":"shader_body\n{\n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = (mix (texture (sampler_main, uv).xyz, texture (sampler_main, (\n    (vec2(-0.993, 0.993) * (uv - 0.5))\n   + 0.5)).xyz, vec3(0.5, 0.5, 0.5)) * 2.0);\n  ret = tmpvar_1.xyz;\n}\n\n"}