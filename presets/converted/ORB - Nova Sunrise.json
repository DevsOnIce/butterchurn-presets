{"baseVals":{"rating":0,"decay":0.9,"echo_zoom":1.007,"echo_alpha":0.5,"echo_orient":1,"wave_mode":1,"wrap":0,"brighten":1,"wave_a":0.001,"zoom":0.96,"rot":-6.27999,"warp":0.00052,"wave_r":0,"wave_g":0,"wave_b":0,"ob_r":1,"ob_g":1,"ob_b":1,"mv_x":64,"mv_y":48,"mv_l":4.95,"mv_r":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"textured":1,"rad":2.66718,"tex_zoom":0.45112,"g":1,"a":0.15,"g2":0,"a2":0.05},"init_eqs_str":"m.q1 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.r=(0.1+(0.5*Math.sin(m.q1))); m.g=(0.1+(0.5*Math.sin((m.q1*0.9878)))); m.b=(0.1+(0.5*Math.sin((m.q1*0.897))));"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"sides":100,"x":1,"rad":0.10201},"init_eqs_str":"m.q1 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.x=(0.5+(0.02*Math.sin(m.time))); m.y=(0.5+(0.02*Math.cos(m.time))); m.r=(0.1+(0.5*Math.sin((m.q1*0.01)))); m.g=(0.1+(0.5*Math.sin((m.q1*0.09878)))); m.b=(0.1+(0.5*Math.sin((m.q1*0.0897)))); m.r2=(0.1+(0.5*Math.sin((m.q1*0.035)))); m.g2=(0.1+(0.5*Math.sin((m.q1*0.09878)))); m.b2=(0.1+(0.5*Math.sin((m.q1*0.0897))));"},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"spectrum":1,"usedots":1,"additive":1},"init_eqs_str":"m.samp = 0;\nm.xx = 0;\nm.q1 = 0;\nm.zs = 0;\nm.pi = 0;\nm.zz = 0;\nm.yy = 0;\n\n\t\t\tm.rkeys = ['zs'];","frame_eqs_str":"","point_eqs_str":"m.zs=((below(m.zs, 100)!=0)?(100):(m.zs)); m.zs=((above(m.zs, 10100)!=0)?(100):(m.zs)); m.zs=((above(m.zs, 1100)!=0)?(1):(m.zs)); m.pi=3.141592; m.samp=m.sample; m.xx=(Math.cos(((m.q1*m.samp)+m.q1))*1); m.yy=(Math.sin(((m.q1*m.samp)+(m.q1*0.9)))*1); m.zz=((2.5*m.samp)*0.1); m.x=((m.xx*m.zz)*4); m.y=((m.yy*m.zz)*4); m.x=((m.x*0.5)+0.5); m.y=((m.y*0.5)+0.5); m.r=1; m.g=1; m.b=1;"},{"baseVals":{"enabled":1,"spectrum":1,"thick":1,"additive":1,"a":0.01},"init_eqs_str":"m.samp = 0;\nm.xx = 0;\nm.q1 = 0;\nm.zs = 0;\nm.pi = 0;\nm.zz = 0;\nm.yy = 0;\n\n\t\t\tm.rkeys = ['zs'];","frame_eqs_str":"","point_eqs_str":"m.zs=((below(m.zs, 100)!=0)?(100):(m.zs)); m.zs=((above(m.zs, 10100)!=0)?(100):(m.zs)); m.zs=((above(m.zs, 1100)!=0)?(1):(m.zs)); m.pi=3.141592; m.samp=m.sample; m.xx=(Math.cos(((m.q1*m.samp)+m.q1))*1); m.yy=(Math.sin(((m.q1*m.samp)+(m.q1*0.9)))*1); m.zz=((2.5*m.samp)*0.1); m.x=((m.xx*m.zz)*4); m.y=((m.yy*m.zz)*4); m.x=((m.x*0.5)+0.5); m.y=((m.y*0.5)+0.5); m.r=(0.5+((0.5*Math.cos(((m.q1*2)*0.1)))*Math.sin((m.q1*0.1)))); m.g=(0.5+((0.5*Math.sin(((m.q1*2)*0.1)))*Math.sin((m.q1*0.1)))); m.b=(0.5+(0.5*Math.cos(m.q1)));"},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.basstime = 0;\nm.stickybit = 0;\nm.volavg2 = 0;\nm.q1 = 0;\nm.q9 = 0;\nm.sample1 = 0;\nm.difftime = 0;\nm.diff = 0;\nm.edge = 0;\nm.volavg = 0;\nm.bit2 = 0;\nm.vol = 0;\nm.q2 = 0;\nm.q3 = 0;\nm.basssum = 0;\nm.sample2 = 0;\nm.state=0;","frame_eqs_str":"m.basstime=(m.basstime+(m.bass*0.06)); m.q1=m.basstime; m.q9=(m.basstime*0.000005); m.basstime=((below(m.basstime, 1000)!=0)?(1000):(m.basstime)); m.vol=pow(((m.bass+m.mid)+m.treb), 2); m.basssum=m.vol; m.stickybit=mod(m.time,2); m.volavg=(m.volavg+(m.vol*equal(m.stickybit, 1))); m.sample1=(m.sample1+equal(m.stickybit, 1)); m.volavg2=(m.volavg2+(m.vol*equal(m.stickybit, 0))); m.sample2=(m.sample2+equal(m.stickybit, 0)); m.edge=bnot(equal(m.bit2, m.stickybit)); m.volavg=(m.volavg-((m.volavg*m.edge)*m.stickybit)); m.volavg2=(m.volavg2-((m.volavg2*m.edge)*equal(m.stickybit, 0))); m.sample1=(m.sample1-((m.sample1*m.edge)*m.stickybit)); m.sample2=(m.sample2-((m.sample2*m.edge)*equal(m.stickybit, 0))); m.diff=((equal(m.stickybit, 1)!=0)?(div(m.basssum,div(m.volavg2,m.sample2))):(0)); m.diff=((equal(m.stickybit, 0)!=0)?(div(m.basssum,div(m.volavg,m.sample1))):(m.diff)); m.q3=m.diff; m.bit2=mod(m.time,2); m.difftime=(m.difftime+(m.diff*0.03)); m.q2=m.difftime; m.difftime=((above(m.difftime, 2000)!=0)?(0):(m.difftime)); m.monitor=m.q1;\n\t\tm.rkeys = [];","pixel_eqs_str":"m.zoom=1;","warp":"uniform sampler2D sampler_cells;\nshader_body\n{\n  vec3 final_noise_1;\n  vec2 tmpvar_2;\n  tmpvar_2 = (uv - 0.5);\n  final_noise_1 = texture (sampler_cells, ((tmpvar_2 * (1.0 - \n    (bass_att * 0.1)\n  )) + 0.5)).xyz;\n  final_noise_1 = (1.0 - (final_noise_1 * 0.25));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = texture (sampler_main, (((tmpvar_2 * \n    (1.0 - (bass_att * 0.01))\n  ) * final_noise_1.xy) + 0.5)).xyz;\n  ret = tmpvar_3.xyz;\n}\n\n","comp":"shader_body\n{\n  vec3 ret_1;\n  ret_1 = (texture (sampler_main, uv).xyz * 2.0);\n  vec3 tmpvar_2;\n  tmpvar_2 = sqrt(ret_1);\n  ret_1 = (1.0 - ((tmpvar_2 * \n    (1.0 - tmpvar_2)\n  ) * 4.0));\n  vec4 tmpvar_3;\n  tmpvar_3.w = 1.0;\n  tmpvar_3.xyz = ret_1;\n  ret = tmpvar_3.xyz;\n}\n\n"}