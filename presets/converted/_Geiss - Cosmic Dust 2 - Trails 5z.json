{"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_mode":6,"additivewave":1,"wave_dots":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_a":1.003,"wave_scale":2.911,"wave_smoothing":0.9,"modwavealphastart":1.21,"modwavealphaend":1.59,"warpscale":3.138,"zoom":1.063,"dy":-0.005,"warp":0.00054,"wave_r":0.5,"wave_y":0.35,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.q1 = 0;\nm.bass_thresh = 0;\nm.dx_residual = 0;\nm.q2 = 0;\nm.dy_residual = 0;","frame_eqs_str":"m.wave_r=(m.wave_r+(0.650*((0.60*Math.sin((1.437*m.time)))+(0.40*Math.sin((0.970*m.time)))))); m.wave_g=(m.wave_g+(0.650*((0.60*Math.sin((1.344*m.time)))+(0.40*Math.sin((0.841*m.time)))))); m.wave_b=(m.wave_b+(0.650*((0.60*Math.sin((1.251*m.time)))+(0.40*Math.sin((1.055*m.time)))))); m.rot=(m.rot+(0.010*((0.60*Math.sin((0.381*m.time)))+(0.40*Math.sin((0.579*m.time)))))); m.cx=(m.cx+(0.210*((0.60*Math.sin((0.374*m.time)))+(0.40*Math.sin((0.294*m.time)))))); m.cy=(m.cy+(0.210*((0.60*Math.sin((0.393*m.time)))+(0.40*Math.sin((0.223*m.time)))))); m.dx=(m.dx+(0.010*((0.60*Math.sin((0.234*m.time)))+(0.40*Math.sin((0.277*m.time)))))); m.dy=(m.dy+(0.010*((0.60*Math.sin((0.284*m.time)))+(0.40*Math.sin((0.247*m.time)))))); m.decay=(m.decay-(0.01*equal(mod(m.frame,6), 0))); m.dx=(m.dx+m.dx_residual); m.dy=(m.dy+m.dy_residual); m.bass_thresh=((above(m.bass_att, m.bass_thresh)*2)+((1-above(m.bass_att, m.bass_thresh))*(((m.bass_thresh-1.3)*0.96)+1.3))); m.dx_residual=((((equal(m.bass_thresh, 2.13)*0.016)*Math.sin((m.time*7)))+((1-equal(m.bass_thresh, 2.13))*m.dx_residual))*0.9); m.dy_residual=((((equal(m.bass_thresh, 2.13)*0.012)*Math.sin((m.time*9)))+((1-equal(m.bass_thresh, 2.13))*m.dy_residual))*0.9); m.wave_x=(m.wave_x-(m.dx_residual*7)); m.wave_y=(m.wave_y-(m.dy_residual*7)); m.zoom=(m.zoom+(0.04*Math.cos(((m.time*0.513)+2)))); m.q1=(0.12*Math.cos(((m.time*0.479)+1))); m.q2=(0.12*Math.cos(((m.time*0.359)+2)));\n\t\tm.rkeys = [];","pixel_eqs_str":"","pixel_eqs":"","warp":"shader_body\n{\n  vec2 uv_1;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * ((1.0 + \n    (q1 * uv_1.y)\n  ) + (q2 * uv_1.x)));\n  uv_1 = (uv_1 + 0.5);\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv_1);\n  vec2 tmpvar_3;\n  tmpvar_3.y = 0.0;\n  tmpvar_3.x = (texsize.z * 3.0);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = ((mix (\n    max (tmpvar_2.xyz, texture (sampler_main, (uv_1 + (vec2(0.0, 13.0) * (\n      (tmpvar_2.xy - 0.5)\n     * texsize.zw)))).xyz)\n  , texture (sampler_main, \n    (uv_orig + tmpvar_3)\n  ).xyz, vec3(\n    clamp ((0.2 + (0.2 * cos(\n      (((uv_orig.x * 7.3) + (12.56 * ang)) + time)\n    ))), 0.0, 1.0)\n  )) - 0.003) * 0.98);\n  ret = tmpvar_4.xyz;\n}\n\n","comp":"shader_body\n{\n  vec3 ret_1;\n  ret_1 = (abs((texture (sampler_main, uv).xyz - \n    ((texture (sampler_blur1, uv).xyz * scale1) + bias1)\n  )) * 6.0);\n  ret_1 = (ret_1 * 1.333);\n  vec4 tmpvar_2;\n  tmpvar_2.w = 1.0;\n  tmpvar_2.xyz = ret_1;\n  ret = tmpvar_2.xyz;\n}\n\n"}