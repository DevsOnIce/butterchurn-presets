{"baseVals":{"rating":0,"gammaadj":1.56,"decay":1,"echo_zoom":0.362,"echo_orient":1,"wave_mode":7,"additivewave":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":1.286,"wave_smoothing":0.63,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":2.853,"fshader":1,"rot":0.006,"warp":0,"wave_g":0.65,"wave_b":0.65,"ob_size":0.005,"mv_x":64,"mv_y":48,"mv_l":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"thick":1,"r":0,"g":0.3,"b":0.75},"init_eqs_str":"m.my = 0;\nm.ma = 0;\nm.mx = 0;\n\n\t\t\tm.rkeys = ['ma','mx','my'];","frame_eqs_str":"","point_eqs_str":"m.ma=(m.ma+(((above(m.bass, 1)*3.1415)*0.01)*m.bass)); m.ma=(m.ma-(((above(m.treb, 1)*3.1415)*0.01)*m.treb)); m.mx=(m.mx+(0.0002*Math.cos(m.ma))); m.my=(m.my+(0.0002*Math.sin(m.ma))); m.mx=((above(m.mx, 0.9)!=0)?((0.9-m.mx)):(m.mx)); m.my=((above(m.my, 0.9)!=0)?((0.9-m.my)):(m.my)); m.mx=((below(m.mx, 0.1)!=0)?((0.9+m.mx)):(m.mx)); m.my=((below(m.my, 0.1)!=0)?((0.9+m.my)):(m.my)); m.x=m.mx; m.y=m.my; m.a=above(((m.bass+m.mid)+m.treb), 0.8);"},{"baseVals":{"enabled":1,"thick":1,"r":0,"b":0},"init_eqs_str":"m.my = 0;\nm.ma = 0;\nm.mx = 0;\n\n\t\t\tm.rkeys = ['ma','mx','my'];","frame_eqs_str":"","point_eqs_str":"m.ma=(m.ma+(((above(m.bass, 1)*3.1415)*0.05)*m.bass)); m.ma=(m.ma-(((above(m.mid, 1)*3.1415)*0.05)*m.mid)); m.mx=(m.mx+(0.0001*Math.cos(m.ma))); m.my=(m.my+(0.0001*Math.sin(m.ma))); m.mx=((above(m.mx, 0.9)!=0)?((0.9-m.mx)):(m.mx)); m.my=((above(m.my, 0.9)!=0)?((0.9-m.my)):(m.my)); m.mx=((below(m.mx, 0.1)!=0)?((0.9+m.mx)):(m.mx)); m.my=((below(m.my, 0.1)!=0)?((0.9+m.my)):(m.my)); m.x=m.mx; m.y=m.my; m.a=above(((m.bass+m.mid)+m.treb), 0.1);"},{"baseVals":{"enabled":1,"thick":1,"g":0.5,"b":0},"init_eqs_str":"m.my = 0;\nm.ma = 0;\nm.mx = 0;\n\n\t\t\tm.rkeys = ['ma','mx','my'];","frame_eqs_str":"","point_eqs_str":"m.ma=(m.ma+(((above(m.mid, 1)*3.1415)*0.01)*m.mid)); m.ma=(m.ma-(((above(m.treb, 1)*3.1415)*0.01)*m.treb)); m.mx=(m.mx+(0.0004*Math.cos(m.ma))); m.my=(m.my+(0.0004*Math.sin(m.ma))); m.mx=((above(m.mx, 0.9)!=0)?((0.9-m.mx)):(m.mx)); m.my=((above(m.my, 0.9)!=0)?((0.9-m.my)):(m.my)); m.mx=((below(m.mx, 0.1)!=0)?((0.9+m.mx)):(m.mx)); m.my=((below(m.my, 0.1)!=0)?((0.9+m.my)):(m.my)); m.x=m.mx; m.y=m.my; m.a=above(((m.bass+m.mid)+m.treb), 0.3);"},{"baseVals":{"enabled":1,"thick":1,"r":0.4,"g":0,"b":0.6},"init_eqs_str":"m.my = 0;\nm.ma = 0;\nm.mx = 0;\n\n\t\t\tm.rkeys = ['ma','mx','my'];","frame_eqs_str":"","point_eqs_str":"m.ma=(m.ma+(((above(m.bass, 0.5)*3.1415)*0.02)*m.bass)); m.ma=(m.ma-(((above(m.treb, 0.5)*3.1415)*0.02)*m.treb)); m.mx=(m.mx+(0.0008*Math.cos(m.ma))); m.my=(m.my+(0.0008*Math.sin(m.ma))); m.mx=((above(m.mx, 0.9)!=0)?((0.9-m.mx)):(m.mx)); m.my=((above(m.my, 0.9)!=0)?((0.9-m.my)):(m.my)); m.mx=((below(m.mx, 0.1)!=0)?((0.9+m.mx)):(m.mx)); m.my=((below(m.my, 0.1)!=0)?((0.9+m.my)):(m.my)); m.x=m.mx; m.y=m.my; m.a=above(((m.bass+m.mid)+m.treb), 0.2);"}],"init_eqs_str":"m.d = 0;\nm.res = 0;\nm.q6 = 0;\nm.q1 = 0;\nm.q5 = 0;\nm.c_x = 0;\nm.c_y = 0;\nm.v = 0;\nm.diff = 0;\nm.q4 = 0;\nm.r = 0;\nm.beat = 0;\nm.vol = 0;\nm.q2 = 0;\nm.q3 = 0;\nm.m = 0;\nm.c_x=0.5; m.c_y=0.5;","frame_eqs_str":"m.q1=m.aspectx; m.q2=m.aspecty; m.rot=0; m.zoom=1; m.warp=0; m.vol=(((m.bass*8)+(m.mid*5))+(m.treb*3)); m.m=((m.m*0.96)+(m.vol*0.06)); m.monitor=(m.vol-m.m); m.beat=((above(m.vol, m.res)*above(m.vol, m.m))*above(m.vol, 10)); m.diff=(((1-m.beat)*m.diff)+(m.beat*(m.vol-m.res))); m.res=((m.beat*(m.vol+(m.m*0.15)))+((1-m.beat)*(m.res-div(((0.15+(m.diff*0.03))*60),m.fps)))); m.res=Math.max(0, m.res); m.r=((m.beat!=0)?(((0.02*(rand(200)-100))*0.01)):(m.r)); m.rot=m.r; m.c_x=((m.beat!=0)?((0.5+((0.5*(rand(200)-100))*0.01))):(m.c_x)); m.c_y=((m.beat!=0)?((0.5+((0.5*(rand(200)-100))*0.01))):(m.c_y)); m.v=((m.beat!=0)?((0.035+((0.025*(rand(200)-100))*0.01))):(m.v)); m.q3=m.c_x; m.q4=m.c_y; m.q5=m.v; m.q6=m.beat;\n\t\tm.rkeys = [];","pixel_eqs_str":"m.d=(pow(sqrt((sqr((m.x-m.q3))+sqr((m.y-m.q4)))), 0.5)-0); m.v=m.q5; m.dx=((m.v*(m.x-m.q3))*m.d); m.dy=((m.v*(m.y-m.q4))*m.d);","warp":"shader_body\n{\n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  vec4 tmpvar_2;\n  tmpvar_2 = texture (sampler_main, uv);\n  tmpvar_1.xyz = ((texture (sampler_main, clamp (\n    (uv - (((vec2(0.0, 64.0) * texsize.zw) * dot (\n      (tmpvar_2.xyz - 0.35)\n    , vec3(0.32, 0.49, 0.29))) * (dot (tmpvar_2.xyz, vec3(0.32, 0.49, 0.29)) - 0.4)))\n  , 0.0, 1.0)).xyz - 0.0011) + ((texture (sampler_noise_lq, \n    (((uv_orig * texsize.xy) * (texsize_noise_lq.zw * 1.5)) + rand_frame.xy)\n  ) - 0.5) * 0.0038).xyz);\n  ret = tmpvar_1.xyz;\n}\n\n","comp":"shader_body\n{\n  vec2 uv1_1;\n  vec2 tmpvar_2;\n  tmpvar_2.y = 0.0;\n  tmpvar_2.x = texsize.z;\n  vec2 tmpvar_3;\n  tmpvar_3.x = 0.0;\n  tmpvar_3.y = texsize.w;\n  vec2 tmpvar_4;\n  tmpvar_4.x = (texture (sampler_main, (uv - tmpvar_2)).xyz - texture (sampler_main, (uv + tmpvar_2)).xyz).x;\n  tmpvar_4.y = (texture (sampler_main, (uv - tmpvar_3)).xyz - texture (sampler_main, (uv + tmpvar_3)).xyz).x;\n  uv1_1 = ((0.3 * cos(\n    ((uv - 0.5) * 2.0)\n  )) - tmpvar_4);\n  float tmpvar_5;\n  tmpvar_5 = clamp ((0.04 / sqrt(\n    dot (uv1_1, uv1_1)\n  )), 0.0, 1.0);\n  uv1_1 = ((0.3 * cos(\n    (uv1_1 * 12.0)\n  )) - (9.0 * tmpvar_4));\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = (tmpvar_5 + ((texture (sampler_main, uv).xyz * 12.0) * vec3(clamp (\n    (0.04 / sqrt(dot (uv1_1, uv1_1)))\n  , 0.0, 1.0))));\n  ret = tmpvar_6.xyz;\n}\n\n"}