{"baseVals":{"rating":2,"gammaadj":1.98,"decay":0.5,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":3,"wave_mode":1,"additivewave":1,"wave_thick":1,"modwavealphabyvolume":1,"wave_brighten":0,"darken":1,"wave_a":0.001,"wave_scale":0.168,"wave_smoothing":0,"wave_mystery":-0.2,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpanimspeed":1.459,"warpscale":2.007,"zoom":0.9999,"warp":0.01,"sx":0.9999,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0,"ob_a":1,"ib_size":0.26,"mv_x":32,"mv_y":24,"mv_l":0.5,"mv_r":0.3,"mv_g":0.5,"mv_b":0.4,"mv_a":0,"b1ed":0.7},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":1,"scaling":0.89152,"smoothing":0.82,"a":0.1},"init_eqs_str":"m.px = 0;\nm.t1 = 0;\nm.py = 0;\nm.k1 = 0;\nm.t2 = 0;\n\n\t\t\tm.rkeys = ['t1','t2'];","frame_eqs_str":"m.t1=1; m.t2=7;","point_eqs_str":"m.r=0.31; m.b=0; m.g=0.0; m.a=1; m.t1=mod(((m.t1*67)+37),4096); m.px=div((m.t1-2047),4096); m.t2=mod(((m.t2*67)+37),4096); m.py=div((m.t2-0),4096); m.k1=mod((m.sample*100),8); m.y=(div(m.py,5)+0.1); m.a=below(m.py, 0.9); m.x=(0.5+(0.4*Math.sin((m.sample*26))));"},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.index = 0;\nm.q22 = 0;\nm.q21 = 0;\nm.q29 = 0;\nm.dec_med = 0;\nm.movz = 0;\nm.movx = 0;\nm.rott = 0;\nm.is_beat = 0;\nm.q23 = 0;\nm.k1 = 0;\nm.q24 = 0;\nm.dec_slow = 0;\nm.q10 = 0;\nm.bass_2 = 0;\nm.q26 = 0;\nm.p2 = 0;\nm.avg = 0;\nm.beat = 0;\nm.p1 = 0;\nm.peak = 0;\nm.q27 = 0;\nm.p3 = 0;\nm.t0 = 0;\nm.q28 = 0;\nm.q30 = 0;\nm.q20 = 0;\nm.bass_ = 0;\nm.q28=0; m.q29=0; m.p1=0;","frame_eqs_str":"m.dec_med=pow(0.9, div(30,m.fps)); m.dec_slow=pow(0.99, div(30,m.fps)); m.beat=Math.max(Math.max(m.bass, m.mid), m.treb); m.avg=((m.avg*m.dec_slow)+(m.beat*(1-m.dec_slow))); m.is_beat=(above(m.beat, ((0.5+m.avg)+m.peak))*above(m.time, (m.t0+0.2))); m.t0=((m.is_beat*m.time)+((1-m.is_beat)*m.t0)); m.peak=((m.is_beat*m.beat)+(((1-m.is_beat)*m.peak)*m.dec_med)); m.index=mod((m.index+m.is_beat),8); m.q20=m.avg; m.q21=m.beat; m.q22=m.peak; m.q23=m.index; m.q24=m.is_beat; m.q26=((m.bass+m.mid)+m.treb); m.k1=(m.is_beat*equal(m.index, 0)); m.p1=((m.k1*(m.p1+1))+((1-m.k1)*m.p1)); m.p2=((m.dec_med*m.p2)+((1-m.dec_med)*m.p1)); m.p3=((m.dec_med*m.p3)+((1-m.dec_med)*m.p2)); m.rott=div((m.p3*3.1416),2); m.q27=(m.index+1); m.movz=(m.movz+(div((0.006*30),m.fps)*(1.5+Math.sin(m.rott)))); m.q29=m.movz; m.movx=(m.movx+(div((0.01*30),m.fps)*Math.sin(div(m.time,5)))); m.q28=m.movx; m.q30=(Math.sin(div(m.time,9))+2); m.bass_=((m.bass_*m.dec_slow)+((1-m.dec_slow)*m.bass_att)); m.bass_2=((m.bass_2*m.dec_slow)+((1-m.dec_slow)*m.bass_)); m.q10=(m.bass_2-m.bass_); m.q10=(-Math.sin((m.time*0.5))*0.005);\n\t\tm.rkeys = [];","pixel_eqs_str":"m.warp=0.02;","warp":"shader_body\n{\n  float k1_1;\n  float ky_2;\n  vec2 uv3_3;\n  vec2 tmpvar_4;\n  tmpvar_4 = (uv - vec2(0.5, 0.5));\n  uv3_3 = ((40.0 + (30.0 * rand_preset)).x * tmpvar_4);\n  float tmpvar_5;\n  tmpvar_5 = dot (texture (sampler_noise_lq, uv), vec4(0.32, 0.49, 0.29, 0.0));\n  ky_2 = clamp (((\n    (-(uv3_3.y) / 50.0)\n   + \n    ((tmpvar_5 / (4.0 + (16.0 * rand_preset)).x) * cos((16.0 * tmpvar_5)))\n  ) + 0.2), 0.0, 1.0);\n  float tmpvar_6;\n  tmpvar_6 = (uv3_3.x * 2.0);\n  k1_1 = (tmpvar_6 - (sign(tmpvar_6) * 24.0));\n  k1_1 = (k1_1 - (sign(k1_1) * 9.0));\n  k1_1 = (k1_1 - (sign(k1_1) * 5.0));\n  float tmpvar_7;\n  tmpvar_7 = (6.0 * rand_preset.x);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - ((3.0 + tmpvar_7) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 2.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 3.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 4.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  k1_1 = (k1_1 + ((2.0 * \n    (k1_1 - (((3.0 + tmpvar_7) * 5.0) * sign(k1_1)))\n  ) * ky_2));\n  ky_2 = clamp ((ky_2 - 0.1), 0.0, 1.0);\n  float tmpvar_8;\n  tmpvar_8 = clamp (k1_1, -1.6, 1.6);\n  k1_1 = tmpvar_8;\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = clamp ((clamp (\n    ((vec3((abs(\n      cos(tmpvar_8)\n    ) / 2.0)) * vec3(1.0, 0.0, 0.0)) * (1.0 - pow ((\n      (3.0 * tmpvar_4.y)\n     - 0.1), 4.0)))\n  , 0.0, 1.0) + (vec3(0.5, 0.0, 0.0) * \n    pow ((2.0 * tmpvar_4.y), 6.0)\n  )), 0.0, 1.0);\n  ret = tmpvar_9.xyz;\n}\n\n","comp":"float xlat_mutablecover;\nfloat xlat_mutabledist;\nfloat xlat_mutabledist2;\nfloat xlat_mutableinten;\nfloat xlat_mutablen;\nvec3 xlat_mutableneu;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv5;\nshader_body\n{\n  xlat_mutabledist = dist;\n  xlat_mutabledist2 = dist2;\n  xlat_mutableinten = inten;\n  xlat_mutableneu = neu;\n  xlat_mutableuv2 = uv2;\n  xlat_mutableuv5 = uv5;\n  vec2 uv_1;\n  vec3 clouds_2;\n  vec2 sunpos_3;\n  vec3 ret_4;\n  vec2 tmpvar_5;\n  tmpvar_5.y = -0.6;\n  tmpvar_5.x = (rand_preset.x - 0.5);\n  sunpos_3 = tmpvar_5;\n  uv_1 = (uv - 0.5);\n  uv_1 = (uv_1 * aspect.xy);\n  uv_1.x = uv_1.x;\n  clouds_2 = ((clamp (\n    (uv.y * uv.y)\n  , 0.0, 1.0) * (1.0 + rand_preset)).xyz + ((\n    clamp ((1.0 - uv.y), 0.0, 1.0)\n   * \n    (1.0 + (rand_preset * slow_roam_cos))\n  ) / 2.0).xyz);\n  xlat_mutablecover = 0.0;\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  xlat_mutablen = 1.0;\n  while (true) {\n    if ((xlat_mutablen > 6.0)) {\n      break;\n    };\n    xlat_mutabledist = (1.0 - fract((\n      (xlat_mutablen / 6.0)\n     + \n      (0.02 * time)\n    )));\n    xlat_mutabledist2 = (1.0 - fract((\n      (xlat_mutablen / 6.0)\n     + \n      (0.01 * time)\n    )));\n    xlat_mutableinten = ((1.0 - xlat_mutabledist) * 2.0);\n    xlat_mutableuv2.y = (uv_1.y - (0.2 * rand_preset.y));\n    xlat_mutableuv2.x = (uv_1.x + ((rand_preset.z - 0.5) / 2.0));\n    vec2 tmpvar_6;\n    tmpvar_6.x = 0.5;\n    tmpvar_6.y = ((0.25 + q10) + (0.1 * rand_preset.x));\n    xlat_mutableuv2 = (((\n      (1.0 + (2.0 * rand_preset.x))\n     * xlat_mutabledist) * xlat_mutableuv2) - tmpvar_6);\n    vec2 tmpvar_7;\n    tmpvar_7 = fract(xlat_mutableuv2);\n    xlat_mutableuv5 = ((normalize(\n      (uv_1 - sunpos_3)\n    ) * 0.2) + sunpos_3);\n    xlat_mutablecover = (xlat_mutablecover + dot ((\n      (texture (sampler_blur1, fract(((2.0 * xlat_mutableuv5) * xlat_mutabledist2))).xyz * scale1)\n     + bias1), vec3(0.32, 0.49, 0.29)));\n    xlat_mutableneu = ((texture (sampler_main, tmpvar_7).xyz + (\n      (texture (sampler_blur1, tmpvar_7).xyz * scale1)\n     + bias1)) / 4.0);\n    xlat_mutableret1 = (xlat_mutableret1 + (xlat_mutableneu * xlat_mutableinten));\n    xlat_mutablen += 1.0;\n  };\n  float tmpvar_8;\n  tmpvar_8 = clamp ((xlat_mutablecover * 2.0), 0.0, 1.0);\n  ret_4 = (clamp (clouds_2, 0.0, 1.0) * ((0.4 + \n    ((vec3(tmpvar_8) * vec3(tmpvar_8)) * 0.8)\n  ) * 1.5));\n  ret_4 = (ret_4 * clamp ((1.0 - \n    (xlat_mutableret1.x * 4.0)\n  ), 0.0, 1.0));\n  ret_4 = (ret_4 + ((\n    ((vec3(tmpvar_8) * 0.1) * rand_preset.x)\n   * \n    (1.0 + rand_preset)\n  .xyz) * (uv_1.y + 0.5)));\n  vec4 tmpvar_9;\n  tmpvar_9.w = 1.0;\n  tmpvar_9.xyz = ret_4;\n  ret = tmpvar_9.xyz;\n}\n\n"}