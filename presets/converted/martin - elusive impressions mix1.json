{"baseVals":{"rating":4,"gammaadj":1.98,"decay":0.5,"echo_zoom":0.952,"echo_alpha":0.5,"echo_orient":3,"wave_mode":4,"additivewave":1,"wave_dots":0,"wave_thick":0,"modwavealphabyvolume":1,"wave_brighten":0,"wrap":1,"darken_center":0,"red_blue":0,"brighten":0,"darken":1,"solarize":0,"invert":0,"wave_a":0.002,"wave_scale":0.079,"wave_smoothing":0,"wave_mystery":-0.22,"modwavealphastart":0.81,"modwavealphaend":1.4,"warpanimspeed":1.459,"warpscale":2.007,"zoomexp":1,"fshader":0,"zoom":0.9999,"rot":0,"cx":0.5,"cy":0.5,"dx":0,"dy":0,"warp":0.01,"sx":0.9999,"sy":1,"wave_r":0.6,"wave_g":0.5,"wave_b":0,"wave_x":0.5,"wave_y":0.5,"ob_size":0,"ob_r":0,"ob_g":0,"ob_b":0,"ob_a":1,"ib_size":0.26,"ib_r":0.25,"ib_g":0.25,"ib_b":0.25,"ib_a":0,"mv_x":64,"mv_y":48,"mv_dx":0,"mv_dy":0,"mv_l":1.85,"mv_r":0.5,"mv_g":0.5,"mv_b":0.5,"mv_a":0,"b1n":0,"b2n":0,"b3n":0,"b1x":1,"b2x":1,"b3x":1,"b1ed":0},"shapes":[{"baseVals":{"enabled":1,"sides":16,"additive":0,"thickoutline":0,"textured":1,"num_inst":6,"x":0.73,"y":0.5,"rad":0.29466,"ang":0,"tex_ang":0,"tex_zoom":1.8751,"r":0.7,"g":0.7,"b":1,"a":1,"r2":0,"g2":0,"b2":0,"a2":0,"border_r":1,"border_g":1,"border_b":0,"border_a":0},"init_eqs_str":"m.q25 = 0;\nm.y0 = 0;\nm.x0 = 0;\nm.trig = 0;\n\n\t\t\tm.rkeys = ['y0','x0'];","frame_eqs_str":"m.trig=m.q25; m.a=(m.trig*Math.min(((m.bass+m.treb)-0.5), 1)); m.a2=(m.trig*0); m.x0=((m.x0*bnot(m.trig))+div((m.trig*rand(100)),100)); m.y0=((m.y0*bnot(m.trig))+div((m.trig*rand(100)),100)); m.tex_ang=div(rand(20),3); m.rad=(0.1+div(rand(8),16)); m.x=m.x0; m.y=m.y0; m.r=(0.7+(0.3*Math.sin(div(m.time,12)))); m.b=(0.7+(0.3*Math.sin(div(m.time,15)))); m.g=(0.7+(0.3*Math.sin(div(m.time,8)))); m.r2=m.r; m.b2=m.b; m.g2=m.g;"},{"baseVals":{"enabled":0,"sides":32,"additive":0,"thickoutline":0,"textured":0,"num_inst":37,"x":0.5,"y":0.5,"rad":0.0363,"ang":0.81681,"tex_ang":0.37699,"tex_zoom":1.02841,"r":1,"g":1,"b":1,"a":0.05,"r2":1,"g2":1,"b2":1,"a2":0,"border_r":1,"border_g":1,"border_b":1,"border_a":0},"init_eqs_str":"m.ampl = 0;\nm.g0 = 0;\nm.q15 = 0;\nm.trel = 0;\nm.yes = 0;\nm.k1 = 0;\nm.bright = 0;\nm.q16 = 0;\nm.r0 = 0;\nm.q17 = 0;\nm.q2 = 0;\nm.tmp = 0;\nm.b0 = 0;\nm.q8 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.k1=(div(m.instance,m.num_inst)*6.28); m.tmp=(div(m.q17,32)+(m.time*0.1)); m.trel=(m.tmp-Math.floor(m.tmp)); m.yes=above(Math.sin(div(m.time,9.5)), 0); m.bright=((((6*m.q2)*m.q2)*m.yes)+(0.1*Math.min(m.q8, 1))); m.border_a=m.bright; m.tmp=((2*Math.sin(div(m.time,12)))-1); m.a=(((((0.5*m.yes)*pow(2, (-18*Math.abs((m.k1-(6.28*m.trel))))))*above(m.tmp, 0))*m.tmp)*m.tmp); m.ampl=0.1; m.rad=(0.02+(0.0*Math.sin(((m.k1*4)+m.time)))); m.x=(0.5+((m.q15*m.ampl)*Math.cos((m.k1+m.q17)))); m.y=(0.5+((m.q16*m.ampl)*Math.sin((m.k1+m.q17)))); m.r0=Math.sin(div(m.time,7)); m.g0=Math.sin(div(m.time,5)); m.b0=Math.sin(div(m.time,9)); m.border_r=(0.8+(0.2*m.r0)); m.border_g=(0.8+(0.2*m.g0)); m.border_b=(0.8+(0.2*m.b0)); m.a2=0;"},{"baseVals":{"enabled":0,"sides":26,"additive":0,"thickoutline":0,"textured":0,"num_inst":2,"x":0.5,"y":0.5,"rad":0.15038,"ang":0,"tex_ang":0.62832,"tex_zoom":1.35189,"r":1,"g":1,"b":1,"a":0.5,"r2":1,"g2":1,"b2":1,"a2":0,"border_r":0.5,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_str":"m.q26 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.a=Math.min(m.q26, 1);"},{"baseVals":{"enabled":0,"sides":24,"additive":0,"thickoutline":0,"textured":1,"num_inst":1,"x":0.7,"y":0.51,"rad":0.19869,"ang":0,"tex_ang":1.00531,"tex_zoom":0.49981,"r":1,"g":1,"b":0.99,"a":0,"r2":0,"g2":0,"b2":0,"a2":1,"border_r":0,"border_g":0.5,"border_b":0.5,"border_a":0},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":""}],"waves":[{"baseVals":{"enabled":0,"samples":182,"sep":60,"spectrum":0,"usedots":1,"thick":0,"additive":0,"scaling":0.14868,"smoothing":0,"r":1,"g":1,"b":1,"a":0.4},"init_eqs_str":"m.t1 = 0;\nm.t2 = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.t1=1; m.t2=0;","point_eqs_str":""},{"baseVals":{"enabled":0,"samples":100,"sep":0,"spectrum":0,"usedots":1,"thick":1,"additive":0,"scaling":0.89152,"smoothing":0,"r":1,"g":1,"b":1,"a":0.1},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":"","point_eqs_str":""},{"baseVals":{"enabled":0,"samples":512,"sep":0,"spectrum":0,"usedots":0,"thick":1,"additive":0,"scaling":0.89152,"smoothing":0.82,"r":1,"g":1,"b":1,"a":0.1},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":"","point_eqs_str":""},{"baseVals":{"enabled":0,"samples":512,"sep":0,"spectrum":1,"usedots":1,"thick":0,"additive":0,"scaling":1,"smoothing":0.5,"r":1,"g":1,"b":1,"a":1},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":"","point_eqs_str":""}],"init_eqs_str":"m.sw2 = 0;\nm.index2 = 0;\nm.q25 = 0;\nm.index = 0;\nm.q12 = 0;\nm.q18 = 0;\nm.q22 = 0;\nm.q21 = 0;\nm.q13 = 0;\nm.sw3 = 0;\nm.q15 = 0;\nm.q6 = 0;\nm.dec_med = 0;\nm.q5 = 0;\nm.mindev = 0;\nm.trel = 0;\nm.q9 = 0;\nm.t0a = 0;\nm.itrel = 0;\nm.my = 0;\nm.is_beat = 0;\nm.q31 = 0;\nm.q24 = 0;\nm.dec_slow = 0;\nm.q11 = 0;\nm.q10 = 0;\nm.sdev = 0;\nm.ma = 0;\nm.q4 = 0;\nm.spb = 0;\nm.spb_ = 0;\nm.q16 = 0;\nm.q26 = 0;\nm.avg = 0;\nm.mx = 0;\nm.q19 = 0;\nm.beat = 0;\nm.q17 = 0;\nm.trel2 = 0;\nm.peak = 0;\nm.jmp = 0;\nm.itrel_ = 0;\nm.q2 = 0;\nm.q27 = 0;\nm.q14 = 0;\nm.sw1 = 0;\nm.tmp = 0;\nm.q3 = 0;\nm.t0 = 0;\nm.q7 = 0;\nm.q28 = 0;\nm.q30 = 0;\nm.q20 = 0;\nm.q8 = 0;\nm.avg=1; m.index=rand(8); m.index2=rand(8); m.ran=1; m.spb_=0.3; m.sdev=0.1; m.trel2=div(rand(100),100);","frame_eqs_str":"m.dec_med=pow(0.9, div(30,m.fps)); m.dec_slow=pow(0.98, div(30,m.fps)); m.beat=((m.bass+m.mid)+m.treb); m.avg=((m.avg*m.dec_slow)+(m.beat*(1-m.dec_slow))); m.is_beat=(above(m.beat, ((0.2+m.avg)+m.peak))*above(m.time, (m.t0+0.1))); m.t0=((m.is_beat*m.time)+((1-m.is_beat)*m.t0)); m.peak=((m.is_beat*m.beat)+(((1-m.is_beat)*m.peak)*m.dec_med)); m.index=mod((m.index+m.is_beat),16); m.index2=mod((m.index2+(m.is_beat*bnot(m.index))),12); m.spb=Math.min(((m.t0-m.t0a)+0.01), 2); m.t0a=m.t0; m.spb_=((m.is_beat!=0)?(((m.spb_*0.9)+(0.1*m.spb))):(m.spb_)); m.mindev=Math.min(Math.min(Math.abs((m.spb-m.spb_)), Math.abs(((m.spb*2)-m.spb_))), Math.abs((m.spb-(m.spb_*2)))); m.sdev=((m.is_beat!=0)?(((m.sdev*0.9)+(0.1*pow((m.mindev+0.02), 2)))):(m.sdev)); m.q20=m.avg; m.q21=m.beat; m.q22=(m.peak+0.1); m.q24=m.is_beat; m.q27=m.index; m.q28=m.index2; m.trel=(m.trel+(div(div(1,m.fps),m.spb_)*4)); m.itrel=Math.floor(m.trel); m.q25=above(m.itrel, m.itrel_); m.q30=mod(m.itrel,2); m.itrel_=m.itrel; m.q31=(div(m.trel,8)-Math.floor(div(m.trel,8))); m.ma=(m.ma+div(m.peak,m.fps)); m.mx=((m.mx*m.dec_med)+((1-m.dec_med)*Math.cos(m.ma))); m.my=((m.my*m.dec_med)+((1-m.dec_med)*Math.sin((m.ma+div(m.trel,16))))); m.q15=m.mx; m.q16=m.my; m.q17=m.ma; m.sw1=((m.sw1!=0)?(bnot((m.q24*bnot(rand(10))))):((m.q24*bnot(rand(20))))); m.sw2=((m.sw2!=0)?(bnot((m.q24*bnot(rand(40))))):((m.q24*bnot(rand(80))))); m.sw3=((m.sw3!=0)?(bnot((m.q24*bnot(rand(10))))):((m.q24*bnot(rand((100+(10000*m.sdev))))))); m.q6=((Math.sin(div(m.time,15))*Math.sin(div(m.time,27)))*0.1); m.q10=Math.sin(div(m.time,8)); m.q10=((m.q10*m.q10)*0.1); m.q11=(1.5+Math.sin(div(m.time,7.8))); m.q12=(((below(m.sdev, 0.02)*bnot(m.q8))!=0)?(m.q25):(1)); m.q13=(0.5+Math.sin(div(m.time,17))); m.q19=(Math.sin(div(m.time,5.3))*0.4); m.q3=m.sw1; m.q4=div(0.02,m.sdev); m.q5=(Math.max(Math.min(((4*Math.sin(div(m.trel,64)))-3), 1), 0)*0.4); m.q7=(below(m.sdev, 0.004)*mod(m.index2,2)); m.q2=(Math.abs(m.q19)*sqrt(((m.q15*m.q15)+(m.q16*m.q16)))); m.trel2=(m.trel2+div(((0.003*m.q22)*m.q22),m.fps)); m.tmp=Math.sin(m.trel2); m.tmp=((10*m.tmp)-9); m.q8=((m.tmp*above(m.tmp, 0))*(div(4,Math.max((m.q22-4), 0.2))+4)); m.q26=((above(m.q22, 16)*(m.q22-16))*2); m.tmp=div(m.index2,6); m.q14=((Math.abs(((m.tmp-Math.floor(m.tmp))-0.5))*6)+1); m.tmp=Math.sin((div(m.trel,4)*3.14)); m.jmp=(m.jmp+((div((above(m.tmp, 0.5)*m.tmp),m.fps)*8)*m.sw2)); m.q9=(((m.jmp*equal(m.q14, 1))*below(m.sdev, 0.04))+(m.time*above(Math.sin(div(m.q17,23)), 0.9))); m.q18=((div((m.tmp*m.tmp),2)*bnot(m.q8))*m.sw3); m.monitor=m.avg; m.rot=0.003; m.warp=0.0;\n\t\tm.rkeys = [];","pixel_eqs_str":"m.zoom=(1.0+(((m.q20-1.5)*0.1)*m.rad));","warp":"float xlat_mutablenoise;\nvec3 xlat_mutableret1;\nvec2 xlat_mutableuv1;\nvec2 xlat_mutableuv2;\nfloat xlat_mutablezv;\nshader_body\n{\n  vec2 tmpvar_1;\n  tmpvar_1.x = q15;\n  tmpvar_1.y = q16;\n  xlat_mutableuv1 = (uv - 0.5);\n  vec2 tmpvar_2;\n  tmpvar_2.x = (texture (sampler_main, (uv + vec2(0.002, 0.0))) - texture (sampler_main, (uv - vec2(0.002, 0.0)))).z;\n  tmpvar_2.y = (texture (sampler_main, (uv + vec2(0.0, 0.002))) - texture (sampler_main, (uv - vec2(0.0, 0.002)))).z;\n  xlat_mutablezv = (time * 0.1);\n  xlat_mutableuv2 = ((q11 * xlat_mutableuv1) + (0.04 * time));\n  vec3 tmpvar_3;\n  tmpvar_3.xy = xlat_mutableuv2;\n  tmpvar_3.z = xlat_mutablezv;\n  vec3 tmpvar_4;\n  tmpvar_4.xy = (xlat_mutableuv2 * vec2(2.0, 2.0));\n  tmpvar_4.z = (xlat_mutablezv * 2.0);\n  vec3 tmpvar_5;\n  tmpvar_5.xy = (xlat_mutableuv2 * vec2(4.0, 4.0));\n  tmpvar_5.z = (xlat_mutablezv * 3.0);\n  vec3 tmpvar_6;\n  tmpvar_6.xy = (xlat_mutableuv2 * vec2(8.0, 8.0));\n  tmpvar_6.z = (xlat_mutablezv * 7.0);\n  xlat_mutablenoise = (((\n    (texture (sampler_noisevol_hq, tmpvar_3).z + (texture (sampler_noisevol_hq, tmpvar_4).z / 2.0))\n   + \n    (texture (sampler_noisevol_hq, tmpvar_5).z / 4.0)\n  ) + (texture (sampler_noisevol_hq, tmpvar_6).z / 8.0)) - 0.5);\n  float tmpvar_7;\n  tmpvar_7 = pow (xlat_mutablenoise, q13);\n  xlat_mutablenoise = tmpvar_7;\n  xlat_mutableuv2 = ((xlat_mutableuv1 * (1.0 + \n    (0.5 * q2)\n  )) + (tmpvar_7 * 0.1));\n  float tmpvar_8;\n  tmpvar_8 = ((texture (sampler_blur1, vec2(0.5, 0.5)).xyz * scale1) + bias1).x;\n  vec2 x_9;\n  x_9 = (xlat_mutableuv2 - (tmpvar_1 * q19));\n  vec2 x_10;\n  x_10 = (xlat_mutableuv1 - (0.03 / q22));\n  xlat_mutableret1 = (((0.002 / \n    (sqrt(dot (x_9, x_9)) - (q10 / q22))\n  ) * (0.5 + \n    normalize(roam_cos)\n  ).xyz) + ((0.002 / \n    sqrt(dot (x_10, x_10))\n  ) * clamp (\n    (1.0 - (8.0 * tmpvar_8))\n  , 0.0, 1.0)));\n  xlat_mutableret1 = (((xlat_mutableret1 + \n    (texture (sampler_main, ((xlat_mutableuv1 + 0.5) + (q6 * tmpvar_2))) * 0.96)\n  .xyz) - 0.02) - (tmpvar_8 * 0.1));\n  vec4 tmpvar_11;\n  tmpvar_11.w = 1.0;\n  tmpvar_11.xyz = ((q12 * xlat_mutableret1) + ((1.0 - q12) * texture (sampler_main, uv).xyz));\n  ret = tmpvar_11.xyz;\n}\n\n","comp":"float xlat_mutableang2;\nfloat xlat_mutabledist;\nfloat xlat_mutableinten;\nvec3 xlat_mutableret1;\nfloat xlat_mutablesmask;\nfloat xlat_mutablestars;\nvec2 xlat_mutableuv0;\nvec2 xlat_mutableuv2;\nvec2 xlat_mutableuv4;\nshader_body\n{\n  xlat_mutableang2 = ang2;\n  xlat_mutabledist = dist;\n  xlat_mutableinten = inten;\n  xlat_mutablem = m;\n  xlat_mutablesmask = smask;\n  xlat_mutablestars = stars;\n  xlat_mutableuv2 = uv2;\n  xlat_mutableuv4 = uv4;\n  n = 1;\n  anz = 4;\n  vec2 uv_1;\n  vec3 ret_3;\n  xlat_mutableuv0 = uv;\n  uv_1 = ((uv - 0.5) * aspect.xy);\n  vec2 tmpvar_4;\n  tmpvar_4.x = ((0.1 / rad) + (time * -0.05));\n  tmpvar_4.y = 0.0;\n  uv_1 = (uv_1 / (1.0 + (q8 * \n    sqrt(dot (uv_1, uv_1))\n  )));\n  uv_1 = (uv_1 * (1.0 - (\n    (float(mod (q28, 2.0)))\n   / 4.0)));\n  uv_1 = (uv_1 * (1.0 + (\n    ((texture (sampler_noise_mq, tmpvar_4) - 0.5) * rad)\n  .x * q5)));\n  xlat_mutableret1 = vec3(0.0, 0.0, 0.0);\n  while (true) {\n    if ((n > anz)) {\n      break;\n    };\n    xlat_mutablem = int((float(mod (float(n), 2.0))));\n    xlat_mutableang2 = (((\n      ((6.28 * float(n)) / float(anz))\n     * q14) + (\n      (q9 * q28)\n     / 8.0)) + ((q28 * 3.1416) / 4.0));\n    float tmpvar_5;\n    tmpvar_5 = cos(xlat_mutableang2);\n    float tmpvar_6;\n    tmpvar_6 = sin(xlat_mutableang2);\n    xlat_mutableuv2.x = ((uv_1.x * tmpvar_5) - (uv_1.y * tmpvar_6));\n    xlat_mutableuv2.y = ((uv_1.x * tmpvar_6) + (uv_1.y * tmpvar_5));\n    xlat_mutableuv2 = (xlat_mutableuv2 / (1.0 + (\n      (q26 * sqrt(dot (uv_1, uv_1)))\n     * \n      float(xlat_mutablem)\n    )));\n    xlat_mutableuv2 = (xlat_mutableuv2 * (1.0 + (\n      (float(xlat_mutablem) - 0.5)\n     * q18)));\n    if (((q3 * float(xlat_mutablem)) == 1.0)) {\n      xlat_mutableuv2 = xlat_mutableuv2.yx;\n    };\n    xlat_mutableret1 = max (xlat_mutableret1, texture (sampler_main, (xlat_mutableuv2 + 0.5)).xyz);\n    n++;\n  };\n  xlat_mutablestars = 0.0;\n  anz = 2;\n  for (int n_1_2 = 0; n_1_2 <= anz; n_1_2++) {\n    xlat_mutabledist = (1.0 - fract((\n      (float(n_1_2) / float(anz))\n     + \n      (time / 8.0)\n    )));\n    xlat_mutableinten = (1.0 - pow (xlat_mutabledist, 4.0));\n    xlat_mutableuv4 = (((64.0 * xlat_mutabledist) * (xlat_mutableuv0 - 0.5)) * aspect.xy);\n    xlat_mutablesmask = (texture (sampler_pw_noise_lq, (xlat_mutableuv4 / 256.0)).y - 0.9);\n    vec2 tmpvar_7;\n    tmpvar_7 = abs((fract(xlat_mutableuv4) - 0.5));\n    float tmpvar_8;\n    tmpvar_8 = max (xlat_mutablestars, clamp ((xlat_mutableinten * \n      ((0.4 / sqrt(dot (tmpvar_7, tmpvar_7))) * xlat_mutablesmask)\n    ), 0.0, 1.0));\n    xlat_mutablestars = (tmpvar_8 * tmpvar_8);\n  };\n  vec3 tmpvar_9;\n  tmpvar_9 = (((texture (sampler_blur2, \n    (((uv - 0.5) / 2.0) + 0.5)\n  ).xyz * scale2) + bias2) * clamp ((1.0 - \n    dot ((xlat_mutableret1 * 16.0), vec3(0.32, 0.49, 0.29))\n  ), 0.0, 1.0));\n  xlat_mutableret1 = (xlat_mutableret1 * ((1.0 - q7) + (\n    (q7 * q25)\n   / 2.0)));\n  ret_3 = (1.0 - exp((\n    -(xlat_mutableret1)\n   * 4.0)));\n  ret_3 = (pow (ret_3, vec3(1.8, 1.8, 1.8)) + tmpvar_9);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_3;\n  ret = tmpvar_10.xyz;\n}\n\n"}