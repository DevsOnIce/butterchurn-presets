{"baseVals":{"rating":0,"gammaadj":1,"decay":1,"echo_zoom":1,"echo_alpha":0.5,"echo_orient":1,"wave_mode":5,"wave_brighten":0,"wrap":0,"solarize":1,"wave_a":0.032,"wave_scale":4.778,"wave_smoothing":0,"modwavealphastart":0.71,"modwavealphaend":1.3,"warpscale":1.331,"zoom":1.01959,"warp":0.0091,"wave_r":0,"wave_g":0,"wave_b":0,"ob_size":0.05,"ob_a":0.1,"ib_size":0,"mv_a":0},"shapes":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":1,"samples":16,"thick":1,"additive":1},"init_eqs_str":"m.rkeys = [];","frame_eqs_str":"","point_eqs_str":""},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"m.redsine = 0;\nm.bluesine = 0;\nm.thresh = 0;\nm.greenif = 0;\nm.dy_r = 0;\nm.dx_r = 0;\nm.redif = 0;\nm.blueif = 0;\nm.vol = 0;\nm.greensine = 0;","frame_eqs_str":"m.vol=(((m.bass+m.mid)+m.treb_att)*0.3333); m.redsine=(0.5+((0.15*m.bass)*Math.sin((m.time*1.21)))); m.greensine=(0.5+((0.15*m.mid)*Math.sin((m.time*1.133)))); m.bluesine=(0.5+((0.15*m.treb)*Math.sin((m.time*1.114)))); m.redif=((above(m.bass, 1.2)!=0)?(m.redsine):(((above(m.redif, 0.95)!=0)?(0):((m.redif*0.5))))); m.greenif=((above(m.mid, 1.2)!=0)?(m.greensine):(((above(m.greenif, 0.95)!=0)?(0):((m.greenif*0.5))))); m.blueif=((above(m.treb, 1.2)!=0)?(m.bluesine):(((above(m.blueif, 0.95)!=0)?(0):((m.blueif*0.5))))); m.ob_r=m.redif; m.ob_g=m.greenif; m.ob_b=m.blueif; m.wave_x=(m.wave_x+(0.2*Math.sin((0.32*m.time)))); m.wave_y=(m.wave_y+(0.2*Math.cos((0.32*m.time))));\n\t\tm.rkeys = ['thresh','dx_r','dy_r'];","pixel_eqs_str":"m.thresh=((above(m.bass_att, m.thresh)*2)+((1-above(m.bass_att, m.thresh))*(((m.thresh-1.3)*0.96)+1.3))); m.dx_r=(((equal(m.thresh, 2)*0.015)*Math.sin((5*m.time)))+((1-equal(m.thresh, 2))*m.dx_r)); m.dy_r=(((equal(m.thresh, 2)*0.015)*Math.sin((6*m.time)))+((1-equal(m.thresh, 2))*m.dy_r)); m.dx=(m.dx_r+(0.005*Math.sin((m.time*1.463)))); m.dy=(m.dy_r+(0.005*Math.sin((m.time*1.222))));","warp":"shader_body\n{\n  vec4 tmpvar_1;\n  tmpvar_1.w = 1.0;\n  tmpvar_1.xyz = texture (sampler_fw_main, uv).xyz;\n  ret = tmpvar_1.xyz;\n}\n\n","comp":"shader_body\n{\n  vec3 aret_1;\n  vec4 mb_2;\n  vec3 ret_3;\n  vec4 tmpvar_4;\n  tmpvar_4 = texture (sampler_blur1, uv);\n  mb_2.x = texture (sampler_main, ((tmpvar_4.xyz * scale1) + bias1).xy).x;\n  mb_2.y = ((tmpvar_4.xyz * scale1) + bias1).x;\n  mb_2.z = ((texture (sampler_blur2, uv).xyz * scale2) + bias2).x;\n  mb_2.w = ((texture (sampler_blur3, uv).xyz * scale3) + bias3).x;\n  ret_3 = (mb_2.xxx + mix ((texture (sampler_fw_main, uv).xyz * 5.0), (texture (sampler_fw_main, \n    ((0.5 - uv) + 0.5)\n  ).xyz * 5.0), vec3(0.5, 0.5, 0.5)));\n  ret_3 = (ret_3 * (1.0 - ret_3));\n  ret_3.x = (ret_3.x * (ret_3.x * mb_2.y));\n  ret_3.y = (ret_3.y * (ret_3.y * mb_2.y));\n  ret_3.z = (ret_3.z * ((1.0 - \n    (ret_3.z / ret_3.x)\n  ) + 1.0));\n  vec3 tmpvar_5;\n  tmpvar_5 = (1.0 - ret_3);\n  aret_1.x = (1.0/(ret_3.x));\n  aret_1.y = (tmpvar_5.y * (1.0/(ret_3.y)));\n  aret_1.z = (tmpvar_5.z - (1.0/(ret_3.z)));\n  ret_3 = ((ret_3 / aret_1) * mb_2.w);\n  vec4 tmpvar_6;\n  tmpvar_6.w = 1.0;\n  tmpvar_6.xyz = ret_3;\n  ret = tmpvar_6.xyz;\n}\n\n"}