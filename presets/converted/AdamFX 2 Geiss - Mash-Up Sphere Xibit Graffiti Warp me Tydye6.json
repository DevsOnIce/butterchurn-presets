{"baseVals":{"rating":5,"gammaadj":1.9,"echo_zoom":1.169,"wave_brighten":0,"wave_a":0.001,"wave_scale":0.535,"wave_smoothing":0,"wave_mystery":-0.48,"modwavealphastart":1,"modwavealphaend":1.1,"warpscale":2.853,"zoom":1.04,"dx":0.03,"warp":0.47402,"wave_g":0.65,"wave_b":0,"mv_x":6.4,"mv_y":48,"mv_dx":0.5,"mv_dy":0.5,"mv_l":5,"mv_r":0.014,"mv_g":0.872,"mv_b":0.522,"mv_a":0},"shapes":[{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"rad":0.7463,"tex_zoom":0.94204,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"m.val = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.ang=((Math.sin(m.time)*0.5)+0.5); m.val=3; m.a2=(m.val*0.33); m.a=(m.val*0.33); m.rad=((Math.cos((m.time*0.3))*0.4)+0.65); m.x=((Math.sin((m.time*0.25))*0.25)+0.5); m.y=((Math.cos((m.time*0.45))*0.25)+0.5);"},{"baseVals":{"enabled":1,"thickoutline":1,"textured":1,"rad":0.7463,"tex_zoom":0.94204,"g":1,"b":1,"r2":1,"b2":1,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"m.val = 0;\n\n\t\t\tm.rkeys = [];","frame_eqs_str":"m.ang=((Math.cos((m.time*0.3))*0.5)+0.5); m.val=3; m.a2=(m.val*0.33); m.a=(m.val*0.33); m.rad=((Math.sin((m.time*0.3))*0.4)+0.65); m.x=((Math.cos((m.time*0.25))*0.25)+0.5); m.y=((Math.sin((m.time*0.45))*0.25)+0.5);"},{"baseVals":{"enabled":1,"thickoutline":1,"rad":0.36456,"r":0,"g2":0,"a2":1,"border_r":0,"border_g":0,"border_b":0,"border_a":0},"init_eqs_str":"m.vb = 0;\nm.vg = 0;\nm.h2 = 0;\nm.vr = 0;\nm.dist = 0;\nm.maat = 0;\n\n\t\t\tm.rkeys = ['h2','maat'];","frame_eqs_str":"m.h2=(m.h2+((above(m.treb, 1.32)*0.8)*0.9)); m.vr=((Math.sin((m.h2*0.8))*0.5)+0.5); m.vg=((Math.sin((m.h2*0.5))*0.5)+0.5); m.vb=((Math.sin((m.h2*0.1))*0.5)+0.5); m.g=m.vg; m.r=m.vr; m.b=m.vb; m.g2=m.g; m.r2=m.r; m.b2=m.b; m.dist=(mod(m.frame,100)*0.01); m.maat=(m.maat+above(m.bass_att, 1.5)); m.maat=(below(m.maat, 16)*m.maat); m.x=((below(m.maat, 8)!=0)?(((below(m.maat, 4)!=0)?(m.dist):((1-m.dist)))):(m.x)); m.y=((above(m.maat, 8)!=0)?(((above(m.maat, 4)!=0)?(m.dist):((1-m.dist)))):(m.y));"},{"baseVals":{"enabled":0}}],"waves":[{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}},{"baseVals":{"enabled":0}}],"init_eqs_str":"","frame_eqs_str":"m.wave_r=(m.wave_r+(0.700*((0.20*Math.sin((0.933*m.time)))+(0.30*Math.sin((1.045*m.time)))))); m.wave_g=(m.wave_g+(0.700*((0.20*Math.sin((0.900*m.time)))+(0.30*Math.sin((0.956*m.time)))))); m.wave_b=(m.wave_b+(0.200*((0.20*Math.sin((0.910*m.time)))+(0.30*Math.sin((0.920*m.time)))))); m.zoom=(m.zoom+(0.02*Math.cos(((m.time*1.713)+2)))); m.zoom=(m.zoom+(0.02*Math.cos(((m.time*2.319)+4)))); m.zoom=(m.zoom+(0.02*Math.cos(((m.time*1.522)+1))));\n\t\tm.rkeys = [];","pixel_eqs_str":"m.dx=(0.002*Math.cos((m.ang+1.57))); m.dy=(-0.002*Math.sin((m.ang+1.57)));","warp":"shader_body\n{\n  vec2 my_uv_1;\n  vec3 ret_2;\n  float tmpvar_3;\n  tmpvar_3 = (((texture (sampler_blur2, \n    (uv + vec2(0.005, 0.0))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.005, 0.0))\n  ).xyz * scale2) + bias2)).y;\n  float tmpvar_4;\n  tmpvar_4 = (((texture (sampler_blur2, \n    (uv + vec2(0.0, 0.005))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.0, 0.005))\n  ).xyz * scale2) + bias2)).y;\n  vec2 tmpvar_5;\n  tmpvar_5.x = tmpvar_3;\n  tmpvar_5.y = tmpvar_4;\n  vec2 tmpvar_6;\n  tmpvar_6 = (uv - (tmpvar_5 * 0.01));\n  ret_2.y = texture (sampler_fc_main, (tmpvar_6 - floor(tmpvar_6))).y;\n  ret_2.y = (ret_2.y + ((ret_2.y - \n    ((texture (sampler_blur3, (tmpvar_6 - floor(tmpvar_6))).xyz * scale3) + bias3)\n  .y) * 0.1));\n  vec2 tmpvar_7;\n  tmpvar_7 = floor(uv);\n  ret_2.y = (ret_2.y + (0.006 - (\n    ((texture (sampler_blur3, (uv - tmpvar_7)).xyz * scale3) + bias3)\n  .x * 5.0)));\n  ret_2.y = ret_2.y;\n  vec2 tmpvar_8;\n  tmpvar_8.x = -(tmpvar_4);\n  tmpvar_8.y = tmpvar_3;\n  my_uv_1 = (tmpvar_8 * 0.05);\n  vec2 tmpvar_9;\n  tmpvar_9.x = (((texture (sampler_blur2, \n    (uv + vec2(0.01, 0.0))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.01, 0.0))\n  ).xyz * scale2) + bias2)).z;\n  tmpvar_9.y = (((texture (sampler_blur2, \n    (uv + vec2(0.0, 0.01))\n  ).xyz * scale2) + bias2) - ((texture (sampler_blur2, \n    (uv - vec2(0.0, 0.01))\n  ).xyz * scale2) + bias2)).z;\n  my_uv_1 = (my_uv_1 + (uv - (tmpvar_9 * 0.005)));\n  ret_2.z = texture (sampler_fw_main, (my_uv_1 - floor(my_uv_1))).z;\n  ret_2.z = (ret_2.z + ((ret_2.z - \n    ((texture (sampler_blur3, (my_uv_1 - floor(my_uv_1))).xyz * scale3) + bias3)\n  .z) * 0.13));\n  ret_2.z = (ret_2.z * 0.95);\n  ret_2.z = (ret_2.z + ((0.03 - \n    ((texture (sampler_blur3, (uv - tmpvar_7)).xyz * scale3) + bias3)\n  .x) - (texture (sampler_main, \n    (my_uv_1 - floor(my_uv_1))\n  ).y * 0.05)));\n  ret_2.x = (texture (sampler_main, uv_orig).x - 0.3);\n  vec4 tmpvar_10;\n  tmpvar_10.w = 1.0;\n  tmpvar_10.xyz = ret_2;\n  ret = tmpvar_10.xyz;\n}\n\n","comp":"shader_body\n{\n  float ang2_1;\n  ang2_1 = ((ang * 0.1591549) + (time * 0.025));\n  float tmpvar_2;\n  tmpvar_2 = (3.0 + floor((rand_preset.z * 5.95)));\n  ang2_1 = (fract((ang2_1 * tmpvar_2)) / tmpvar_2);\n  ang2_1 = (abs((ang2_1 - \n    (0.5 / tmpvar_2)\n  )) * 6.283185);\n  vec2 tmpvar_3;\n  tmpvar_3.x = cos(ang2_1);\n  tmpvar_3.y = sin(ang2_1);\n  vec4 tmpvar_4;\n  tmpvar_4.w = 1.0;\n  tmpvar_4.xyz = (texture (sampler_main, (0.5 + (\n    ((0.4 * (rad * sqrt(\n      dot (texsize.xy, texsize.xy)\n    ))) * tmpvar_3)\n   * texsize.zw))).xyz * 1.333);\n  ret = tmpvar_4.xyz;\n}\n\n"}